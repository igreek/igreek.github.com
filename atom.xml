<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿长小站</title>
  <subtitle>程序猿，极客粉，未来的布道师</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.greekw.com/"/>
  <updated>2017-08-20T15:13:17.641Z</updated>
  <id>http://blog.greekw.com/</id>
  
  <author>
    <name>greekw</name>
    <email>xhwwc397@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>程序员应该访问的最佳网站</title>
    <link href="http://blog.greekw.com/2017/08/20/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BA%94%E8%AF%A5%E8%AE%BF%E9%97%AE%E7%9A%84%E6%9C%80%E4%BD%B3%E7%BD%91%E7%AB%99/"/>
    <id>http://blog.greekw.com/2017/08/20/程序员应该访问的最佳网站/</id>
    <published>2017-08-19T16:00:00.000Z</published>
    <updated>2017-08-20T15:13:17.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序员应该访问的最佳网站中文版原版"><a href="#程序员应该访问的最佳网站中文版原版" class="headerlink" title="程序员应该访问的最佳网站中文版原版"></a>程序员应该访问的最佳网站中文版<a href="https://github.com/sdmg15/Best-websites-a-programmer-should-visit" target="_blank" rel="external">原版</a></h1><p>一些对程序员有用的网站</p>
<p>在学习CS的时候有一些你必须知道的有用的站点来获取通知为了你的技术储备和学习新知识。这里是一个你应该访问的不是非常全面的一些站点的列表，这个列表会不断更新，只要我能得到链接，你也可以通过添加你知道的来为此做出贡献</p>
<a id="more"></a>
<h3>Index</h3>

<p>索引   </p>
<ul>
<li><a href="#when-you-get-stuck">当你遇到问题时</a></li>
<li><a href="#news">新闻篇</a></li>
<li><a href="#coding-practice-for-beginners">针对新手的代码训练</a></li>
<li><a href="#for-those-who-want-to-start-a-small-project-but-cant-find-the-ideas">针对那些想开始一个小的项目但是无从下手的人</a></li>
<li><a href="#general-coding-advice">通用编码建议</a></li>
<li><a href="#coding-style">编码风格</a></li>
<li><a href="#general-tools">通用工具</a></li>
<li><a href="#interview-preparation">面试准备</a></li>
<li><a href="#documentaries">纪录片</a></li>
<li><a href="#moocs-for-learning-something-new">学习新知识-mooc</a></li>
<li><a href="#sites-related-to-your-preferred-programming-language-for-me-java">与你首选的编程语言的站点(对我来说是java)</a></li>
<li><a href="#learn-ai">AI学习</a></li>
<li><a href="#seminar--research-writing--talks-etc">研讨会、研究性写作、会谈等</a></li>
<li><a href="#everything-in-one-place">Reddit知识汇总</a></li>
<li><a href="#youtube-channels">Youtube频道</a></li>
<li><a href="#good-articles">好文章</a></li>
<li><a href="#podcasts">播客</a></li>
<li><a href="#building-a-simple-compilerinterpreter">构建一个简单的编译器/解释器</a></li>
<li><a href="#tutorials">教程</a></li>
<li><a href="#watch-others-code">欣赏他人的代码</a></li>
<li><a href="#what-should-a-programmer-know">一个程序员应该知道的东西</a></li>
<li><a href="#competitive-programming">编程比赛</a></li>
<li><a href="#computer-books">计算机书籍</a></li>
<li><a href="#video-tutorials">视频指南</a></li>
<li><a href="#online-compiler-and-sharing-code-snippets">在线编译和共享代码片段</a></li>
<li><a href="#blogs-of-developers">开发者博客</a></li>
<li><a href="#for-improving-your-english">用来提高你的英语</a></li>
<li><a href="#when-you-get-bored-from-cs-related-stuff">当你厌倦了CS相关的东西</a></li>
</ul>
<h1 id="when-you-get-stuck">当你遇到问题时</h1>

<ul>
<li><a href="http://stackoverflow.com/" target="_blank" rel="external">Stack Overflow</a>: 订阅他们的每周新闻和任何你感兴趣的主题</li>
<li><a href="https://www.quora.com/" target="_blank" rel="external">Quora</a>: 一个共享知识和更好的理解世界的地方</li>
<li><a href="https://learn-anything.xyz/" target="_blank" rel="external">Learn Anything</a>: 帮助你找到学习任何知识时的最佳路径</li>
</ul>
<h1 id="news">新闻篇</h1>

<ul>
<li><a href="https://news.ycombinator.com/" target="_blank" rel="external">Hacker News</a>: 针对程序员的新闻聚合，通过新闻稿获取头条新闻</li>
<li><a href="http://www.hackernewsletter.com/" target="_blank" rel="external">Hacker Newsletter</a> : 手工编辑，周周更新</li>
<li><a href="https://hndigest.com/" target="_blank" rel="external">Hacker News Digest</a> : 根据你想要的频率自动处理   </li>
<li><a href="http://arstechnica.com/" target="_blank" rel="external">Ars Technica</a> : 发表的独特的精品文章</li>
<li><a href="http://technews.acm.org/" target="_blank" rel="external">ACM TechNews</a></li>
<li><a href="https://lobste.rs/" target="_blank" rel="external">Lobsters</a> : Lobsters是一个聚焦于技术的社区，主要是链接聚合和对话题进行讨论    </li>
<li><a href="http://techcrunch.com/" target="_blank" rel="external">TechCrunch</a> : 一个科技新闻的站点</li>
<li><a href="http://gsmarena.com/" target="_blank" rel="external">GSMArena.com</a> : 与最新的移动手机和andriod相关的新闻</li>
<li><a href="https://www.producthunt.com/" target="_blank" rel="external">product hunt </a> : 寻找你最喜欢的东西</li>
<li><a href="https://alternativeto.net" target="_blank" rel="external">AlternativeTo</a> : 软件推荐</li>
<li><a href="https://betterdev.link" target="_blank" rel="external">Better Dev Links</a> : 帮助你成为更好的开发者</li>
</ul>
<h1 id="coding-practice-for-beginners">针对初学者的代码练习</h1>

<ul>
<li><a href="https://www.freecodecamp.com/" target="_blank" rel="external">freeCodeCamp</a> : 学习编码并且为非营利性组织构建项目。打造你的全栈开发技能</li>
<li><a href="http://www.reddit.com/r/dailyprogrammer" target="_blank" rel="external">Reddit.com/r/dailyprogrammer</a> :  有趣的编程挑战，在这里你能学习其他人的编码，对于你解决不了的编码你能看看其他人是怎么解决的</li>
<li><a href="http://programmingbydoing.com/" target="_blank" rel="external">Programming by Doing</a> : 编程进阶站点</li>
<li><a href="http://codeabbey.com/" target="_blank" rel="external">CodeAbbey - 一个任何人都能精通编程的地方</a> : 从菜鸟到专家进阶之地</li>
<li><a href="http://exercism.io/" target="_blank" rel="external">Exercism.io</a> : 用超过30种不同的语言解决实践问题，与其他人分享你的解决方案</li>
<li><a href="http://rosettacode.org/wiki/Category:Programming_Tasks" target="_blank" rel="external">Programming Tasks</a> : 小程序汇总</li>
<li><a href="https://github.com/karan/Projects-Solutions" target="_blank" rel="external">karan/Projects-Solutions</a> 用不同语言实现的项目</li>
<li><a href="http://lod-cloud.net/" target="_blank" rel="external">Lod - Cloud</a> : 开放数据云图</li>
<li><a href="https://caveofprogramming.com/" target="_blank" rel="external">Cave of programming</a> : 学习编程，提升技巧</li>
<li><a href="https://www.codecademy.com/" target="_blank" rel="external">Codeacademy</a> : 交互式编码学习，免费</li>
</ul>
<h1 id="for-those-who-want-to-start-a-small-project-but-cant-find-the-ideas">针对那些想开始一个小的项目但是无从下手的人</h1>

<ul>
<li><a href="http://www.dreamincode.net/forums/topic/78802-martyr2s-mega-project-ideas-list/" target="_blank" rel="external">martyr2s-mega-project-ideas-list</a> : 包含125个项目，从初级到中级</li>
<li><a href="https://github.com/karan/Projects" target="_blank" rel="external">karan/Projects</a> : 针对新手的小项目的汇总</li>
<li><a href="http://rodiongork.tumblr.com/post/108155476418/wrong-big-projects-for-beginners" target="_blank" rel="external">Wrong “big projects” for beginners</a> : 怎样选择，从哪里开始</li>
<li><a href="https://github.com/vicky002/1000_Projects" target="_blank" rel="external">vicky002/1000-Projects</a> : 一个能够用任何编程语言解决的巨型项目清单 </li>
</ul>
<h1 id="general-coding-advice">通用编码建议</h1>


<ul>
<li><a href="https://medium.freecodecamp.com/things-i-wish-someone-had-told-me-when-i-was-learning-how-to-code-565fc9dcb329#.y5wbd3pj6" target="_blank" rel="external">我希望在我一开始学习编码的时候就能得到的一些建议 — Free Code Camp</a></li>
<li><a href="http://thecodist.com/article/lessons_from_a_lifetime_of_being_a_programmer" target="_blank" rel="external">一个程序员一生应遵循的原则</a></li>
<li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=331531" target="_blank" rel="external">良好的编程原则</a></li>
<li><a href="http://matt.might.net/articles/what-cs-majors-should-know/" target="_blank" rel="external">在计算机科学专业应该知道什么</a></li>
<li><a href="https://okepi.wordpress.com/2014/08/21/how-to-become-a-programmer-or-the-art-of-googling-well/" target="_blank" rel="external">如何成为一个程序员或谷歌搜索的艺术</a></li>
<li><a href="http://kevinlondon.com/2015/05/05/code-review-best-practices.html" target="_blank" rel="external">代码审查最佳实践</a></li>
<li><a href="https://stephenhaunts.com/2013/12/11/dieter-rams-10-principles-of-good-product-design/" target="_blank" rel="external">Dieter Rams : 好的产品设计的10个原则</a></li>
<li><a href="https://stephenhaunts.files.wordpress.com/2014/04/10-ways-to-be-a-better-developer.png" target="_blank" rel="external">成为一名优秀开发者的10种方法</a></li>
<li><a href="https://henrikwarne.com/2012/12/12/working-as-a-software-developer/" target="_blank" rel="external">软件开发者的工作</a></li>
<li><a href="https://en.wikipedia.org/wiki/Software_design_pattern" target="_blank" rel="external">软件设计模式</a> : 设计模式的汇总</li>
<li><a href="https://sourcemaking.com/design_patterns" target="_blank" rel="external">设计模式</a> : 用例子详细说明设计模式</li>
</ul>
<h1 id="coding-style">编码风格</h1>

<ul>
<li><a href="http://stanford.edu/class/archive/cs/cs106b/cs106b.1158/styleguide.shtml" target="_blank" rel="external">CS 106B 编码风格指南</a> : 代码臃肿者必看  </li>
<li><a href="https://google.github.io/styleguide/cppguide.html" target="_blank" rel="external">google C++ 编码风格</a>  </li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">Airbnb JS 风格指南</a> : 写JavaScript最好的方式  </li>
<li><a href="https://www.reddit.com/r/learnprogramming/comments/1i4ds4/what_are_some_bad_coding_habits_you_would/" target="_blank" rel="external">建议初学者避免使用的坏的编码习惯?</a>  </li>
<li><a href="https://www.reddit.com/r/C_Programming/comments/1vuubw/good_c_programming_habits/" target="_blank" rel="external">优秀的 C 编码习惯 • /r/C_Programming</a>  </li>
<li><a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs.html" target="_blank" rel="external">怎样高效的报告Bug</a>  </li>
<li><a href="http://www.umich.edu/~eecs381/generalFAQ/Debugging.html" target="_blank" rel="external">调试问题</a>  </li>
<li><a href="http://codebetter.com/" target="_blank" rel="external">你需要更好的代码!</a>  </li>
<li><a href="https://github.com/open-source-society/computer-science" target="_blank" rel="external">在线CS课程目录</a>  </li>
<li><a href="https://github.com/prakhar1989/awesome-courses" target="_blank" rel="external">CS课程目录(许多在线讲座)</a>  </li>
</ul>
<h1 id="general-tools">通用工具</h1>

<h2 id="interview-preparation">面试准备</h2>

<ul>
<li><a href="http://www.geeksforgeeks.org/" target="_blank" rel="external">GeeksforGeeks | 针对geek的计算机科学入门</a> : 订阅他们获取新文章</li>
<li><a href="http://www.techinterview.org/" target="_blank" rel="external">一个技术面试题，逻辑题等的站点</a> : 各种让你思考的东西</li>
<li><a href="https://leetcode.com/problemset/algorithms/" target="_blank" rel="external">Problems | LeetCode OJ </a> : 针对面试的编码训练</li>
<li><a href="http://www.programmerinterview.com/" target="_blank" rel="external">程序员和软件面试问答</a></li>
<li><a href="https://www.reddit.com/user/ashish2199/m/puzzles" target="_blank" rel="external">Reddit.com/user/ashish2199/m/puzzles</a> : Reddit逻辑题</li>
<li><a href="http://puzzles.nigelcoldwell.co.uk/" target="_blank" rel="external">逻辑题答案汇总</a></li>
<li><a href="http://www.indiabix.com/" target="_blank" rel="external">资质问题与答案</a> : Quant and aptitude preparation</li>
<li><a href="http://javahonk.com/category/interview/" target="_blank" rel="external">面试架构 - Java Honk</a></li>
<li><a href="http://www.programcreek.com/2012/11/top-10-algorithms-for-coding-interview/" target="_blank" rel="external">面试10大算法</a></li>
<li><a href="http://www.hiredintech.com/algorithm-design/" target="_blank" rel="external">算法设计流程</a></li>
<li><a href="http://bigocheatsheet.com/#" target="_blank" rel="external">算法复杂度笔记</a></li>
<li><a href="http://cheatsheetworld.com/programming/unix-linux-cheat-sheet/" target="_blank" rel="external">unix／Linux笔记</a></li>
<li><a href="http://kelukelu.me/interview/index.html" target="_blank" rel="external">怎样面试</a></li>
<li><a href="http://www.palantir.com/2011/09/how-to-rock-an-algorithms-interview/" target="_blank" rel="external">怎样进行算法面试</a></li>
<li><a href="http://gurmeet.net/puzzles/" target="_blank" rel="external">优秀的逻辑题</a></li>
<li><a href="http://visualgo.net/" target="_blank" rel="external">通过动画可视化数据结构和算法</a></li>
<li><a href="https://www.reddit.com/r/cscareerquestions/comments/1jov24/heres_how_to_prepare_for_tech_interviews/" target="_blank" rel="external">如何为技术面试做准备• /r/cscareerquestions</a></li>
<li><a href="http://www.kchodorow.com/blog/2013/02/28/guide-to-tech-interviews/" target="_blank" rel="external">技术面试指南</a></li>
<li><a href="https://www.reddit.com/r/cscareerquestions/comments/1b8wa3/why_you_make_less_money/" target="_blank" rel="external">为何你会赚钱少 • /r/cscareerquestions</a></li>
<li><a href="http://placement-iit2013.blogspot.in/" target="_blank" rel="external">IIT Delhi实习经验</a></li>
<li><a href="https://www.reddit.com/r/cscareerquestions/comments/209rkq/what_are_your_goto_questions_for_the_do_you_have/" target="_blank" rel="external">你的问题是什么?</a></li>
<li><a href="https://www.reddit.com/r/cscareerquestions/comments/20ahfq/heres_a_pretty_big_list_of_programming_interview/" target="_blank" rel="external">/r/cscareerquestions</a> : 这是一个非常大的面试问题列表是我在为4大面试时用到的，我认为对大家也是有用的</li>
<li><a href="https://blogs.janestreet.com/interviewing-at-jane-street/" target="_blank" rel="external">华尔街面试</a></li>
<li><a href="http://se7so.blogspot.in/2014/01/how-to-prepare-for-interview-1.html" target="_blank" rel="external">怎样准备一个面试 - 1</a></li>
<li><a href="eulercoder.me/blog/career/Summer-Internship-the-ultimate-guide">夏季实习：最终篇</a></li>
<li><a href="http://www.datsi.fi.upm.es/~frosal/docs/25mdq.html" target="_blank" rel="external">25个最难的HR问题 </a></li>
<li><a href="http://lifehacker.com/tag/job-interviews" target="_blank" rel="external">求职面试新闻、视频、评论和八卦 - Lifehacker </a></li>
<li><a href="http://www.icsjobportal.com/blog/job-interview-questions/" target="_blank" rel="external">如何回答最棘手的40个面试问题| ICS Job Portal </a></li>
<li><a href="http://jobsearch.about.com/od/interviewquestionsanswers/a/interviewquest.htm" target="_blank" rel="external">求职面试问题和最好的答案</a></li>
<li><a href="http://www.artofmanliness.com/2016/01/05/tell-me-a-little-about-yourself/" target="_blank" rel="external">怎样进行自我介绍 | The Art of Manliness </a></li>
<li><a href="http://www.artofmanliness.com/2012/08/06/how-to-ace-a-job-interview/" target="_blank" rel="external">工作面试：如何做好求职面试|展示个人魅力 </a></li>
<li><a href="http://www.lifeclever.com/give-your-resume-a-face-lift/" target="_blank" rel="external">让你的简历改头换面</a></li>
<li><a href="http://ssp.impulsetrain.com/big-o.html" target="_blank" rel="external">大家的误解</a></li>
<li><a href="https://gist.github.com/dideler/2365607" target="_blank" rel="external">位操作技巧</a></li>
<li><a href="http://javahonk.com/core-java-interview-questions/" target="_blank" rel="external">Java核心面试问题 - 每个主题的面试题 </a></li>
<li><a href="http://adnjavainterview.blogspot.in" target="_blank" rel="external">Java面试问题与答案</a></li>
<li><a href="https://www.reddit.com/r/cscareerquestions/comments/2lzc4h/big_collection_of_interview_preparation_links/" target="_blank" rel="external">面试准备时的链接的汇总 • /r/cscareerquestions </a></li>
<li><a href="https://www.reddit.com/r/india/comments/1clgdj/unsolicited_advice_for_job_seekers_and_employers/" target="_blank" rel="external">为求职者和雇主提供的建议</a></li>
<li><a href="https://sites.google.com/site/steveyegge2/five-essential-phone-screen-questions" target="_blank" rel="external">5个基本的电话面试问题 - steveyegge2 </a></li>
<li><a href="http://web.stanford.edu/class/cs9/" target="_blank" rel="external">CS9: CS技术面试中的问题解决</a></li>
<li><a href="https://github.com/mission-peace/interview/wiki" target="_blank" rel="external">Mission-peace/interview problems </a> : 一个大的编码面试的问题的汇总</li>
<li><a href="http://stevestedman.com/wp-content/uploads/VennDiagram1.pdf" target="_blank" rel="external">使用韦恩图进行SQL连接</a></li>
<li><a href="http://java67.blogspot.in/2013/04/10-frequently-asked-sql-query-interview-questions-answers-database.html" target="_blank" rel="external">10个最频繁的SQL查询面试问题</a></li>
<li><a href="http://www.essentialsql.com/get-ready-to-learn-sql-database-normalization-explained-in-simple-english/" target="_blank" rel="external">准备学习SQL篇：用语言描述一下数据库规范化 - Essential SQL </a></li>
<li><a href="http://www.cmi.ac.in/~madhavan/courses/pl2006/lecturenotes/lecture-notes/lecture-notes.html" target="_blank" rel="external">编程语言概念 课堂笔记 </a> :  面向对象概念和编程语言概念</li>
<li><a href="http://www.hiredintech.com/app" target="_blank" rel="external">We Help Coders Get Hired</a> : 提供系统设计，面试策略，软件技能等的web站点</li>
<li><a href="https://github.com/checkcheckzz/system-design-interview" target="_blank" rel="external">系统设计面试</a></li>
<li><a href="http://haseebq.com/how-to-break-into-tech-job-hunting-and-interviews/" target="_blank" rel="external">如何进入科技企业-求职和面试指南</a>  </li>
<li><a href="http://placementsindia.blogspot.in/" target="_blank" rel="external">新人面试</a></li>
<li><a href="http://www.gowrikumar.com/c/index.php" target="_blank" rel="external">一些有趣的C问题 </a></li>
<li><a href="http://www.techinterview.org/" target="_blank" rel="external">一个站点提供技术面试题，逻辑题或者你想的其他内容 </a></li>
<li><a href="https://www.ocf.berkeley.edu/~wwu/riddles/hard.shtml" target="_blank" rel="external"> wu :: riddles(hard) </a> : 逻辑题</li>
<li><a href="https://github.com/odino/interviews" target="_blank" rel="external">https://github.com/odino/interviews</a> : 面试重要问题列表</li>
<li><a href="https://github.com/svozniuk/java-interviews" target="_blank" rel="external">svozniuk/java-interviews</a> : Java面试题</li>
<li><a href="https://github.com/kimberli/interviews" target="_blank" rel="external">kimberli/interviews</a> : 面试学习表格</li>
<li><a href="http://stackoverflow.com/questions/11094330/determining-the-big-o-runtimes-of-these-different-loops" target="_blank" rel="external">确定不同循环的时间复杂度?</a> :在stackoverflow上的一些好问题包括计算时间复杂度.</li>
<li><a href="https://github.com/ChiperSoft/InterviewThis" target="_blank" rel="external">ChiperSoft/InterviewThis</a> : 在面试期间问到对公司的了解的问题</li>
<li><a href="https://www.jitbit.com/news/181-jitbits-sql-interview-questions/" target="_blank" rel="external">SQL面试问题</a> : 好的SQL测试</li>
</ul>
<h1 id="documentaries">纪录片</h1>

<ul>
<li>机器改变世界 - 关于计算机历史的纪录片<ul>
<li><a href="http://www.youtube.com/watch?v=rcR74y61xZk" target="_blank" rel="external">Part 1: 巨大的大脑 </a></li>
<li><a href="http://www.youtube.com/watch?v=1APZ5-cjWfw" target="_blank" rel="external">Part 2: 发现未来</a></li>
<li><a href="http://www.youtube.com/watch?v=zwC3gOudlAc" target="_blank" rel="external">Part 3: 台式计算机</a></li>
<li><a href="http://www.youtube.com/watch?v=4gzpd0irP58" target="_blank" rel="external">Part 4: 机器的思考</a></li>
<li><a href="http://www.youtube.com/watch?v=J_3A2jSnvHE" target="_blank" rel="external">Part 5: 指尖上的世界</a></li>
</ul>
</li>
<li><a href="https://www.youtube.com/playlist?list=PLn-Y3vvQbmHO5WUcBdIWqiUfNawhC1cn3" target="_blank" rel="external">书呆子的胜利</a> : Play-list</li>
<li><a href="https://www.youtube.com/watch?v=a-49a_CjH0M" target="_blank" rel="external">Project Code Rush - netscape/mozilla起源的纪录片</a></li>
<li><a href="https://www.youtube.com/watch?v=XMm0HsmOTFI" target="_blank" rel="external">Linux的故事</a></li>
<li><a href="https://www.youtube.com/watch?v=fxjElWL8igo" target="_blank" rel="external">Linux操作系统的故事 </a></li>
<li><a href="https://www.youtube.com/watch?v=S23yie-779k" target="_blank" rel="external">Breaking the Code: Alan Turing传</a></li>
<li><a href="https://www.youtube.com/watch?v=s1i-dnAH9Y4" target="_blank" rel="external">机械计算机(All Parts) </a> : 20世纪50年代的一个视频，说明了在没有现代电子的情况下机械计算机是如何工作的</li>
<li><a href="https://www.youtube.com/playlist?list=PL_IlIlrxhtPMqW4b0-v8OgLvFZQes6SoZ" target="_blank" rel="external">Download: 互联网的真实故事</a> : 发现频道关于浏览器战争和互联网泡沫的记录</li>
<li><a href="https://teachyourselfcs.com/" target="_blank" rel="external">自学计算机科学</a></li>
<li><a href="https://www.youtube.com/watch?v=42KTvGYQYnA" target="_blank" rel="external">cpu如何执行程序(视频)</a></li>
<li><a href="https://www.youtube.com/watch?v=Mv2XQgpbTNE" target="_blank" rel="external">机器代码指令(视频)</a></li>
<li><a href="https://www.youtube.com/watch?v=iOq5kSKqeR4" target="_blank" rel="external">哈佛大学 CS50 - 渐进学习 (视频)</a></li>
<li><a href="https://www.youtube.com/watch?v=4NIb9l3imAo" target="_blank" rel="external">攻破代码面试</a></li>
<li><a href="https://www.youtube.com/watch?v=Eg5-tdAwclo" target="_blank" rel="external">攻破代码面试-全栈开发演讲者系列</a></li>
<li><a href="https://www.youtube.com/watch?v=1fqxMuPmGak" target="_blank" rel="external">什么都能问 Gayle Laakmann McDowell (程序员面试宝典的作者)</a></li>
</ul>
<h1 id="moocs-for-learning-something-new">学习新知识-mooc</h1>

<ul>
<li><a href="https://www.class-central.com" target="_blank" rel="external">课程中心</a> : 超过10万名学生评价的目录</li>
<li><a href="https://onlinecourses.nptel.ac.in/explorer/search?category=COMP_SCI_ENGG" target="_blank" rel="external">NPTEL Vidoes COMP_SCI_ENGG </a>  </li>
<li><a href="http://coursera.org/" target="_blank" rel="external">Coursera.org</a></li>
<li><a href="http://edx.org/" target="_blank" rel="external">edX</a></li>
<li><a href="http://mooc.fi/english.html" target="_blank" rel="external">MOOC.fi</a> : 赫尔辛基大学在线课程</li>
<li><a href="http://udacity.com/" target="_blank" rel="external">Udacity</a></li>
<li><a href="https://www.kadenze.com/courses?subjects%5B%5D=7" target="_blank" rel="external">Kadenze | Creative Programming</a>: 注重艺术和创造力的编程课</li>
<li><a href="https://www.youtube.com/user/UCBerkeley/videos" target="_blank" rel="external">UCBerkeley</a></li>
<li><a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/" target="_blank" rel="external">麻省理工学院电气工程和计算机科学</a>  </li>
<li><a href="https://www.youtube.com/user/cs50tv/videos" target="_blank" rel="external">CS50</a></li>
<li><a href="https://github.com/prakhar1989/awesome-courses/blob/master/README.md" target="_blank" rel="external">prakhar1989/awesome-CS-courses</a> : CS课程大汇总</li>
<li><a href="https://docs.google.com/spreadsheets/d/1BD8BJJUNaX63m2QmySWMGDp71nx4W4MyyiIBlfMoN3Q/htmlview?sle=true#" target="_blank" rel="external">计算机科学资源 </a> : 针对自学者的mooc列表</li>
<li><a href="https://github.com/prakhar1989/awesome-courses/blob/master/README.md" target="_blank" rel="external">https://github.com/prakhar1989/awesome-courses/blob/master/README.md </a> : 网上CS课程的收集</li>
</ul>
<h1 id="sites-related-to-your-preferred-programming-language-for-me-java">与你偏爱的编程语言相关的网站(对我来说是Java)</h1>

<ul>
<li><a href="http://javarevisited.blogspot.in/" target="_blank" rel="external">Java的过去</a> : 学好Java准备面试</li>
<li><a href="https://docs.oracle.com/javase/tutorial/" target="_blank" rel="external">The Java™ Tutorials  </a> : 最好的Java手册</li>
<li><a href="http://www.artima.com/java/index.html" target="_blank" rel="external">Java Corner at Artima.com </a></li>
<li><a href="http://www.cs.princeton.edu/~cos126/java_visualize/" target="_blank" rel="external">Java Visualizer </a> : 帮助将引用，值，变量可视化</li>
<li><a href="http://www.cafeaulait.org/course/" target="_blank" rel="external">Java课程笔记 </a></li>
<li><a href="http://chimera.labs.oreilly.com/books/1234000001805/index.html" target="_blank" rel="external">Learning Java </a> : 一个免费的在线学习Java语言的教材</li>
<li><a href="http://www.artima.com/insidejvm/ed2/index.html" target="_blank" rel="external">免费在线的章节用来学习java虚拟机</a></li>
<li><a href="http://www.cubrid.org/blog/dev-platform/understanding-jvm-internals/" target="_blank" rel="external">理解JVM</a></li>
<li><a href="http://www.dynatrace.com/en/javabook/how-garbage-collection-works.html" target="_blank" rel="external">垃圾搜集如何工作</a>  </li>
<li><a href="http://www.javaworld.com/" target="_blank" rel="external">Welcome to JavaWorld.com </a></li>
<li><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/" target="_blank" rel="external">Java内存模型</a></li>
<li><a href="https://netbeans.org/project_downloads/usersguide/shortcuts-80.pdf" target="_blank" rel="external">Netbeans的键盘快捷键</a> : 键盘快捷键能够使你在工作时提高生产力</li>
<li><a href="http://www.xyzws.com/javafaq/page/1" target="_blank" rel="external">XyzWs Java FAQs </a> : Java面试题汇总</li>
<li><a href="http://www.docjar.com/" target="_blank" rel="external">搜索开源的Java API </a> : 浏览Java库的源代码，并且学习如何实现</li>
<li><a href="http://www.journaldev.com/" target="_blank" rel="external">JournalDev - Java, Java EE, Android, Web Development Tutorials</a>  </li>
<li><a href="https://github.com/sherxon/AlgoDS" target="_blank" rel="external">算法、数据结构、面试问题和答案的实现 </a></li>
<li><a href="https://plumbr.eu/handbook/what-is-garbage-collection" target="_blank" rel="external">垃圾回收是什么</a> : 动态垃圾搜集</li>
<li><a href="https://javahungry.blogspot.com/2014/02/best-books-for-learning-java-must-read.html" target="_blank" rel="external">学习java的最好的书</a> : Java基础</li>
<li><a href="https://www.youtube.com/watch?v=StdfeXaKGEc&amp;list=PL-XXv-cvA_iAlnI-BQr9hjqADPBtujFJd&amp;index=25" target="_blank" rel="external">垃圾搜集(Java); 扩展数据结构 (视频)</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLO9y7hOkmmSGTy5z6HZ-W4k2y8WXF7Bff" target="_blank" rel="external">编译器(视频)</a></li>
<li><a href="https://www.infoq.com/presentations/garbage-collection-benefits" target="_blank" rel="external">深入Java：垃圾回收!</a></li>
<li><a href="http://www.stroustrup.com/C++.html" target="_blank" rel="external">C++编程语言</a> : C++编程语言</li>
<li><a href="http://www.stroustrup.com/bs_faq.html" target="_blank" rel="external">Bjarne Stroustrup’s FAQ</a> : The C++ FAQ</li>
<li><a href="http://www.stroustrup.com/bs_faq2.html" target="_blank" rel="external">Bjarne Stroustrup’s C++风格和技术问答</a> : C++问答</li>
<li><a href="http://www.stroustrup.com/C++11FAQ.html" target="_blank" rel="external">C++11 -新的ISO C++ 标准</a> : C++11问答</li>
</ul>
<h1 id="learn-ai">AI学习</h1>

<ul>
<li><a href="https://blog.openai.com/unsupervised-sentiment-neuron/" target="_blank" rel="external">无监督神经元</a></li>
<li><a href="https://blog.openai.com/robots-that-learn/" target="_blank" rel="external">机器学习</a></li>
<li><a href="https://grakn.ai/" target="_blank" rel="external">grakn.ai</a></li>
</ul>
<h1 id="seminar--research-writing--talks-etc">研讨会、研究性写作、会谈等</h1>

<ul>
<li><a href="http://www.cs.cmu.edu/~mleone/how-to.html" target="_blank" rel="external">关于研究和写作的建议</a></li>
<li><a href="https://www.cse.iitb.ac.in/~ranade/communicationskills.html" target="_blank" rel="external">研讨会和报告</a></li>
<li><a href="http://www.cse.iitd.ac.in/~srsarangi/articles.html" target="_blank" rel="external">博士论文</a></li>
<li><a href="https://stephenhaunts.com/2015/10/02/practical-tips-for-talking-at-usergroups-and-conferences-part-1/" target="_blank" rel="external">在会议上讨论的实用技巧</a></li>
<li><a href="https://stephenhaunts.com/2015/10/02/practical-tips-for-talking-at-usergroups-and-conferences-part-1/" target="_blank" rel="external">向非程序员展示软件项目</a></li>
</ul>
<h1 id="everything-in-one-place">Reddit知识汇总</h1>

<ul>
<li><a href="https://www.reddit.com/user/ashish2199/m/cs_student_subs" target="_blank" rel="external">reddit.com/user/ashish2199/m/cs_student_subs</a> : 在reddits中计算机科学和编程相关的主题</li>
</ul>
<h1 id="youtube-channels">youtube频道</h1>

<ul>
<li><a href="https://www.youtube.com/user/Computerphile/videos" target="_blank" rel="external">Computerphile </a> : 每个CS学生都应该看</li>
<li><a href="https://www.youtube.com/user/ComputerHistory/videos" target="_blank" rel="external">ComputerHistory </a> : 针对那些想知道如何达成目标的人</li>
<li><a href="https://www.youtube.com/user/GoogleTechTalks/videos" target="_blank" rel="external">GoogleTechTalks </a> : 关于热门话题的视频和在技术界的一些趣事</li>
<li><a href="https://www.youtube.com/user/PlacementGrid/videos" target="_blank" rel="external">Placement Grid </a> : 面试及校园实习经验</li>
<li><a href="https://www.youtube.com/user/GoogleDevelopers/videos" target="_blank" rel="external">Google Developers </a></li>
<li><a href="https://www.youtube.com/user/FacebookDevelopers/videos" target="_blank" rel="external">Facebook Developers </a></li>
<li><a href="https://www.youtube.com/user/OreillyMedia/videos" target="_blank" rel="external">O’Reilly </a> : 世界最佳技术作家访谈录</li>
<li><a href="https://www.youtube.com/user/java/videos" target="_blank" rel="external">Java </a> : 有关Java的会谈</li>
<li><a href="https://www.youtube.com/channel/UCdDhYMT2USoLdh4SZIsu_1g/videos" target="_blank" rel="external">JavaOne </a> : Java会议</li>
<li><a href="https://www.youtube.com/user/CppCon/videos?shelf_id=0&amp;view=0&amp;sort=dd" target="_blank" rel="external">CppCon </a> : C++会议</li>
<li><a href="https://www.youtube.com/user/MeetingCPP/videos" target="_blank" rel="external">Meeting C++ YT Kanalseite </a> : C++会议</li>
<li><a href="https://www.youtube.com/user/ThinMatrix/videos" target="_blank" rel="external">ThinMatrix </a> : 开发者在java中使用OpenGL制作的一个3D游戏的博客和指南</li>
<li><a href="https://www.youtube.com/user/technoparkcorp/videos" target="_blank" rel="external">yegor256 </a></li>
<li><a href="http://www.aristeia.com/presentations.html" target="_blank" rel="external">Scott Meyers: Past Talks </a></li>
<li><a href="https://www.youtube.com/user/ThoughtbotVideo/videos" target="_blank" rel="external">thoughtbot  </a> : 谈论各种话题</li>
<li><a href="https://www.youtube.com/channel/UCU0Rt8VHO5-YNQXwIjkf-1g" target="_blank" rel="external">code::dive conference</a> : 诺基亚技术中心组织的会议</li>
<li><a href="https://www.youtube.com/user/HowToBecomeTV/videos" target="_blank" rel="external">HowToBecomeTV </a> : 与技术界相关的开发人员的好的面试</li>
<li><a href="https://www.youtube.com/user/itcuties/videos" target="_blank" rel="external">ITCuties </a></li>
<li><a href="https://www.youtube.com/user/CodeBabes/videos" target="_blank" rel="external">CodeBabes</a> : 针对那些认为CS缺乏魅力的人</li>
<li><a href="https://www.youtube.com/CodingBlocks" target="_blank" rel="external">Coding Blocks</a> : 指南，技巧</li>
</ul>
<h1 id="good-articles">好文章</h1>

<ul>
<li><a href="http://blog.thefirehoseproject.com/posts/expectations-of-a-junior-developer/" target="_blank" rel="external">初级开发者的想法</a></li>
<li><a href="http://blog.thefirehoseproject.com/posts/learn-to-code-and-be-self-reliant/" target="_blank" rel="external">提升编码技巧的关键</a></li>
<li><a href="https://stevewedig.com/2014/02/03/software-developers-reading-list/" target="_blank" rel="external">一位软件开发者的阅读列表</a> : 这是一些好书和链接</li>
<li><a href="http://haseebq.com/how-to-break-into-tech-job-hunting-and-interviews/" target="_blank" rel="external">如何破解科技求职和面试</a></li>
<li><a href="http://carlcheo.com/compsci" target="_blank" rel="external">白话40个关键的计算机科学概念</a></li>
<li><a href="https://lwn.net/Articles/250967/" target="_blank" rel="external">每个程序员都应该了解的关于内存的内容</a></li>
<li><a href="http://multithreaded.stitchfix.com/" target="_blank" rel="external">我们正在通过创新重塑零售业</a></li>
<li><a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/" target="_blank" rel="external">Unicode </a></li>
<li><a href="http://kunststube.net/encoding/" target="_blank" rel="external">每个程序员都需要知道的关于在文本中设置编码和字符的内容</a></li>
<li><a href="https://www.wikiwand.com/en/List_of_algorithms" target="_blank" rel="external">算法清单</a></li>
<li><a href="https://www.wikiwand.com/en/Java_bytecode" target="_blank" rel="external">深入字节码</a></li>
<li><a href="http://matt.might.net/articles/what-cs-majors-should-know/" target="_blank" rel="external">每种计算机科学专业应该知道什么 </a></li>
<li><a href="https://teachyourselfcs.com/" target="_blank" rel="external">自学计算机科学</a></li>
<li><a href="https://fkcd.ca/b7d.svg" target="_blank" rel="external">数据机构图</a></li>
<li><a href="https://dev.to/vaidehijoshi/a-gentle-introduction-to-graph-theory" target="_blank" rel="external">关于图论的一个介绍</a></li>
<li><a href="https://0xax.gitbooks.io/linux-insides/content/Booting/linux-bootstrap-1.html" target="_blank" rel="external">Linux Inside</a></li>
<li><a href="http://moonscript.org/" target="_blank" rel="external">一个对程序员友好的语言</a></li>
</ul>
<h1 id="podcasts">播客</h1>

<ul>
<li><a href="http://www.codingblocks.net/" target="_blank" rel="external">Coding Blocks - 学习go的概念模式以及最佳实践</a></li>
<li><a href="http://msdevshow.com/" target="_blank" rel="external">我的开发展示</a></li>
<li><a href="http://cynicaldeveloper.com/" target="_blank" rel="external">孤独的开发者</a></li>
<li><a href="http://herdingcode.com/" target="_blank" rel="external">Herding Code</a></li>
<li><a href="http://www.codenewbie.org/" target="_blank" rel="external">Code Newbie</a></li>
<li><a href="http://www.se-radio.net/" target="_blank" rel="external">软件工程师的无线电频道</a></li>
<li><a href="https://devchat.tv/js-jabber" target="_blank" rel="external">javascript论坛</a></li>
<li><a href="https://spec.fm/podcasts/developer-tea" target="_blank" rel="external">开发者茶话会</a> : 为开发者设计的播客</li>
</ul>
<h1 id="building-a-simple-compilerinterpreter">构建一个简单的编译器/解释器</h1>

<ul>
<li><a href="http://c9x.me/compile/bib/" target="_blank" rel="external">业余编译器开发者的资源</a></li>
<li><a href="https://github.com/thejameskyle/the-super-tiny-compiler" target="_blank" rel="external">snowman：可能是有史以来最小的编译器</a></li>
<li><a href="https://dev.to/fcpauldiaz/writing-my-first-compiler" target="_blank" rel="external">我开发的第一个编译器</a></li>
<li><a href="https://sarabander.github.io/sicp/html/index.xhtml" target="_blank" rel="external">计算机程序的构造与解释</a></li>
<li><a href="https://ruslanspivak.com/lsbasi-part1/" target="_blank" rel="external">一起开发一个简单的解释器。第一章</a></li>
<li><a href="http://www.cs.dartmouth.edu/~mckeeman/cs48/mxcom/gem/html/GrowingCompiler.html" target="_blank" rel="external">编译器</a></li>
</ul>
<h1 id="tutorials">教程</h1>

<ul>
<li><a href="http://www.tutorialspoint.com/" target="_blank" rel="external">Tutorialspoint </a></li>
<li><a href="http://www.w3schools.com/" target="_blank" rel="external">W3Schools在线Web教程</a></li>
<li><a href="http://opendatastructures.org/" target="_blank" rel="external">Open Data Structures </a> : 用来学习数据结构和算法的优秀的资源提供了C++ , Java等各种语言的伪代码</li>
<li><a href="http://oopweb.com/Algorithms/Documents/PLDS210/VolumeFrames.html" target="_blank" rel="external">Data Structures and Algorithms by John Morris </a> : 其他的优秀代码和对它的分析</li>
<li><a href="http://cs.lmu.edu/~ray/classes/dsa/" target="_blank" rel="external">CMSI 281: Data Structures </a> : 针对数据结构的轻量级的说明</li>
<li><a href="http://cs.fit.edu/~mmahoney/cse2050/how2cpp.html" target="_blank" rel="external">How to Program in C++  </a> : 怎样学习C++编程，关于学习C++的好资源</li>
<li><a href="https://www.topcoder.com/community/data-science/data-science-tutorials/" target="_blank" rel="external">TopCoder Tutorials </a></li>
<li><a href="http://wildlyinaccurate.com/a-hackers-guide-to-git/" target="_blank" rel="external">A Hacker’s Guide to Git </a> : 为那些想学习git的人打下坚实的基础</li>
<li><a href="http://maryrosecook.com/blog/post/git-from-the-inside-out" target="_blank" rel="external">Git从入门到精通</a></li>
<li><a href="http://freeengineer.org/learnUNIXin10minutes.html" target="_blank" rel="external">10分钟搞定UNIX</a></li>
<li><a href="http://guide.bash.academy/" target="_blank" rel="external">The Bash Guide</a> : 学习Bash Shell的优秀教程</li>
<li><a href="http://ryanstutorials.net/linuxtutorial/" target="_blank" rel="external">Linux Tutorial </a> : 学习Linux的好资源</li>
<li><a href="http://www.ee.surrey.ac.uk/Teaching/Unix/unixintro.html" target="_blank" rel="external">UNIX Tutorial - Introduction </a></li>
<li><a href="http://www.ee.surrey.ac.uk/Teaching/Unix/" target="_blank" rel="external">针对新手的Linux教程</a></li>
<li><a href="http://linuxcommand.org/learning_the_shell.php" target="_blank" rel="external">学习Shell</a></li>
<li><a href="http://prismoskills.appspot.com/lessons/Dynamic_Programming/Chapter_01_-_Introduction.jsp" target="_blank" rel="external">Dynamic programming - PrismoSkills</a> : 学习如何解决动态规划问题</li>
<li><a href="http://www.slideshare.net/olvemaudal/deep-c" target="_blank" rel="external">深入学习C语言</a> : very good presentation on C language</li>
<li><a href="http://c-faq.com/index.html" target="_blank" rel="external">语言中最频繁遇到的问题</a></li>
<li><a href="https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/" target="_blank" rel="external">OS Course Notes </a> : Galvin’s书的章节笔记</li>
<li><a href="http://www.cheat-sheets.org/sites/sql.su/" target="_blank" rel="external">SQL (Structured Query Language) in one page : SQL.SU </a> : 结构化查询语言，一个非常好的SQL记录表</li>
<li><a href="http://www.le.ac.uk/users/rjm1/cotter/index.htm" target="_blank" rel="external">C编程说明</a></li>
<li><a href="http://www.techotopia.com/index.php/MySQL_Essentials" target="_blank" rel="external">MySQL Essentials </a></li>
<li><a href="http://www.mysqltutorial.org/" target="_blank" rel="external">http://www.mysqltutorial.org/ </a></li>
<li><a href="http://duartes.org/gustavo/blog/best-of/" target="_blank" rel="external">Best Of - Gustavo Duarte  </a> : 包含各种主题的文章</li>
<li><a href="http://overapi.com/" target="_blank" rel="external">Collecting all the cheat sheets </a> : 大量编程语言的接口表</li>
<li><a href="http://www.chiark.greenend.org.uk/~sgtatham/cdescent/" target="_blank" rel="external">The Descent to C  </a> : 针对那些从高级编程语言像java或者python迁移到C的人</li>
<li><a href="https://vimtutorplus.herokuapp.com/exercise/1" target="_blank" rel="external">VimTutor+ </a> : 从浏览器上学习VIM</li>
<li><a href="https://learn.hackerearth.com/tutorials/" target="_blank" rel="external">HackerEarth Tutorials </a> : 一些数据结构和算法教程的资源</li>
<li><a href="https://linuxjourney.com/" target="_blank" rel="external">Linux Journey </a> : 学习Linux的好的站点</li>
<li><a href="http://www.cs.cf.ac.uk/Dave/C/CE.html" target="_blank" rel="external">C Programming </a></li>
<li><a href="http://www.cs.cornell.edu/courses/cs2112/2015fa/lectures/index.html" target="_blank" rel="external">CS 2112/ENGRD 2112 Fall 2015 </a> : 数据结构和算法笔记</li>
<li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external">More about Github-flavored markdown</a></li>
<li><a href="http://product.half.ebay.com/The-UNIX-Programming-Environment-by-Brian-W-Kernighan-and-Rob-Pike-1983-Other/54385&amp;tg=info" target="_blank" rel="external">Unix编程环境</a></li>
<li><a href="https://www.amazon.com/dp/1593273894/" target="_blank" rel="external">Linux命令行：一个完整的说明</a></li>
<li><a href="https://en.wikipedia.org/wiki/TCP/IP_Illustrated" target="_blank" rel="external">TCP/IP图解</a></li>
<li><a href="https://www.amazon.com/gp/product/0596007124/" target="_blank" rel="external">设计模式</a></li>
<li><a href="https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612" target="_blank" rel="external">设计模式：可重用面向对象的软件的基础</a> : aka the “Gang Of Four” book, or GOF</li>
<li><a href="https://www.amazon.com/UNIX-Linux-System-Administration-Handbook/dp/0131480057/" target="_blank" rel="external">UNIX和Linux系统管理员手册 第四版</a></li>
<li><a href="https://dzone.com/" target="_blank" rel="external">从新手到专家-编程、web开发、DevOps新闻，教程和工具</a></li>
</ul>
<h1 id="watch-others-code">欣赏他人的代码</h1>

<ul>
<li><a href="https://www.liveedu.tv/" target="_blank" rel="external">LiveEdu.tv</a> : 构建应用，网站游戏等人的视频</li>
</ul>
<h1 id="what-should-a-programmer-know">一个程序员应该知道的东西</h1>

<ul>
<li><a href="http://sijinjoseph.com/programmer-competency-matrix/" target="_blank" rel="external">Programmer Competency Matrix  </a> : 一篇用来了解我们作为程序员的水平的文章</li>
<li><a href="https://github.com/" target="_blank" rel="external">GitHub.com Build software better, together  </a> : 向其他人展示你的项目和与人协作的地方（为了更高效的使用它必须知道Git</li>
<li><a href="https://gitlab.com" target="_blank" rel="external">Gitlab用来提供免费且无限制的私有库和不受限制的团队协作</a>.</li>
</ul>
<h1 id="competitive-programming">编程比赛</h1>

<ul>
<li><a href="http://hackerrank.com/" target="_blank" rel="external">HackerRank </a></li>
<li><a href="http://codeforces.com/" target="_blank" rel="external">Codeforces </a></li>
<li><a href="http://topcoder.com/" target="_blank" rel="external">topcoder </a></li>
<li><a href="https://uva.onlinejudge.org" target="_blank" rel="external">UVa Online Judge </a> : 支持多种语言的数百个问题。</li>
<li><a href="http://hackerearth.com/" target="_blank" rel="external">HackerEarth - Programming challenges and Developer jobs </a></li>
<li><a href="http://codechef.com/" target="_blank" rel="external">CodeChef </a></li>
<li><a href="http://poj.org/problemlist" target="_blank" rel="external">PKU ACM ICPC Practice problems </a></li>
<li><a href="https://projecteuler.net/archives" target="_blank" rel="external">Archived Problems - Project Euler </a></li>
<li><a href="https://code.google.com/codejam/contests.html" target="_blank" rel="external">Google Code Jam Practice and </a> : 之前比赛的练习题</li>
<li><a href="http://www.spoj.com/" target="_blank" rel="external">Sphere Online Judge (SPOJ) </a></li>
<li><a href="https://artofproblemsolving.com/" target="_blank" rel="external">Art of Problem Solving</a></li>
<li><a href="https://www.riddles.io" target="_blank" rel="external">Riddles.io AI Games</a> : 与机器人比赛并获取积分</li>
<li><a href="https://www.codingame.com" target="_blank" rel="external">Codingame</a> : 通过游戏和挑战学习编程</li>
<li><a href="https://www.codewars.com/" target="_blank" rel="external">Codewars</a> : 根据完成的代码排名</li>
</ul>
<h1 id="computer-books">计算机书籍</h1>

<ul>
<li><a href="http://it-ebooks.info/" target="_blank" rel="external">IT eBooks - Free Download - Big Library  </a> : 无广告且能立即下载的电子书下载网站</li>
<li><a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md" target="_blank" rel="external">github.com/vhf/free-programming-books </a> : 超过500本免费电子书几乎包括你能想到的所有语言</li>
<li><a href="http://www.sciencebooksonline.info/computer-science.html" target="_blank" rel="external">Computer Science Books Online </a> : 大约150本计算机方面的电子书</li>
<li><a href="http://gatecse.in/wiki/Best_books_for_CSE#Best_Books_for_GATE_in_CSE" target="_blank" rel="external">Best books for GATE CSE </a></li>
<li><a href="https://cses.fi/book.html" target="_blank" rel="external">https://cses.fi/book.html</a></li>
<li><a href="gen.lib.rus.ec">Library Genesis</a> : 几乎包含你能想到的任何电子书，包含大量的CS文档和手册</li>
</ul>
<h1 id="video-tutorials">视频指南</h1>

<ul>
<li><a href="https://www.youtube.com/user/tusharroy2525/videos" target="_blank" rel="external">Tushar Roy </a> : 数据结构和算法教程</li>
<li><a href="https://www.youtube.com/user/derekbanas/videos" target="_blank" rel="external">Derek Banas </a> : 高质量教程</li>
<li><a href="https://www.youtube.com/user/thenewboston/videos" target="_blank" rel="external">thenewboston </a> : 与谈话内容相比有更多干货</li>
<li><a href="https://www.youtube.com/user/mycodeschool/videos" target="_blank" rel="external">mycodeschool </a> : 数据结构和算法教程</li>
<li><a href="https://www.youtube.com/channel/UCJYhP1lceSUc1bg0LRBUvqA/videos" target="_blank" rel="external">CodeGeek </a></li>
<li><a href="https://www.youtube.com/user/CodingMadeEasy/videos" target="_blank" rel="external">CodingMadeEasy  </a> : C++教程</li>
<li><a href="http://xda-university.com/" target="_blank" rel="external">XDA-University - Helping You Learn Android Development </a></li>
<li><a href="https://www.youtube.com/user/DevTipsForDesigners/videos" target="_blank" rel="external">DevTips </a> : web开发教程</li>
<li><a href="https://www.youtube.com/channel/UCJUmE61LxhbhudzUugHL2wQ/videos" target="_blank" rel="external">codedamn  </a> : 前端web开发教程</li>
<li><a href="http://openclassroom.stanford.edu/MainFolder/CoursePage.php?course=IntroToAlgorithms" target="_blank" rel="external">算法设计和分析</a></li>
<li><a href="http://derekwyatt.org/vim/tutorials/index.html" target="_blank" rel="external">Vim Tutorial Videos - Flarfnoogins </a> : 学习vim的优秀的视频教程</li>
<li><a href="https://www.youtube.com/playlist?list=PL6B940F08B9773B9F" target="_blank" rel="external">CS1: Higher Computing - Richard Buckland UNSW </a> : 一个非常优秀的介绍CS的课程</li>
<li><a href="https://www.youtube.com/channel/UC4DwZ2VXM2KWtzHjVk9M_xg/videos" target="_blank" rel="external">Kathryn Hodge </a> : 针对初学者的好的视频</li>
</ul>
<h1 id="online-compiler-and-sharing-code-snippets">在线编译和共享代码片段</h1>

<ul>
<li><a href="https://codepad.remoteinterview.io/" target="_blank" rel="external">CodePad</a> : 支持代码编写，测试和运行，支持超过25种语言</li>
<li><a href="https://jsfiddle.net/" target="_blank" rel="external">JSFiddle</a> : 在线测试你的javascript，CSS，HTML或者CoffeeScript</li>
<li><a href="https://ideone.com/" target="_blank" rel="external">Ideone.com </a></li>
<li><a href="http://pastebin.com/" target="_blank" rel="external">Pastebin.com </a></li>
<li><a href="https://godbolt.org/" target="_blank" rel="external">Godbolt.org </a>: 一款非常优秀的工具用来探索在不同编译器没有优化时的输出</li>
</ul>
<h1 id="blogs-of-developers">开发者博客</h1>

<ul>
<li><a href="http://blog.codinghorror.com/" target="_blank" rel="external">Coding Horror</a> : 一个最好的编程博客</li>
<li><a href="http://http://www.wildml.com/" target="_blank" rel="external">WildMl</a> : 一个机器学习的博客</li>
<li><a href="http://joelonsoftware.com/" target="_blank" rel="external">Joel on Software</a></li>
<li><a href="https://stephenhaunts.com/" target="_blank" rel="external"> Stephen Haunts { Coding in the Trenches } </a></li>
<li><a href="http://prog21.dadgum.com/" target="_blank" rel="external">在21世界编程</a></li>
<li><a href="http://blog.cleancoder.com/" target="_blank" rel="external">Clean Coder Blog  </a> : 《代码整洁之道》一书作者的博客</li>
<li><a href="http://www.yegor256.com/" target="_blank" rel="external">Programming Blog  </a> : Yegor Bugayenko的编程博客</li>
<li><a href="https://10kloc.wordpress.com/" target="_blank" rel="external">10K-LOC </a></li>
<li><a href="http://stevehanov.ca/blog/" target="_blank" rel="external">http://stevehanov.ca/blog/ </a></li>
<li><a href="https://avidullu.wordpress.com/" target="_blank" rel="external">Geek Land </a></li>
<li><a href="https://latedev.wordpress.com/" target="_blank" rel="external">Late Developer </a></li>
<li><a href="http://rodiongork.tumblr.com/" target="_blank" rel="external">IT Enthusiast </a></li>
<li><a href="http://matt.might.net/articles/" target="_blank" rel="external">blog.might.net </a></li>
<li><a href="http://www.cseblog.com/" target="_blank" rel="external">CSE Blog - quant, math, computer science puzzles </a></li>
<li><a href="https://www.nayuki.io/category/programming" target="_blank" rel="external">Small Programming Challenges and Puzzles</a></li>
<li><a href="http://www.mytechinterviews.com/" target="_blank" rel="external">My Tech Interviews </a></li>
<li><a href="http://blog.hackerearth.com/" target="_blank" rel="external">HackerEarth Blog </a></li>
<li><a href="http://algo-geeks.blogspot.in/" target="_blank" rel="external">Algo-Geeks </a></li>
<li><a href="http://www.codergears.com/Blog/" target="_blank" rel="external">CoderGears Blog Insights from </a> : the CoderGears Team</li>
<li><a href="http://matt.might.net/articles/" target="_blank" rel="external">blog.might.net </a></li>
<li><a href="https://tianrunhe.wordpress.com/" target="_blank" rel="external">Runhe Tian Coding Practice </a></li>
<li><a href="http://www.paulgraham.com/articles.html" target="_blank" rel="external">Paul Graham Essays </a></li>
<li><a href="http://dandreamsofcoding.com/" target="_blank" rel="external">Dan Dreams of Coding </a></li>
<li><a href="http://code.antonio081014.com/" target="_blank" rel="external">Antonio081014’s Algorithms Codes </a></li>
<li><a href="http://jeremykun.com/" target="_blank" rel="external">Math ∩ Programming</a></li>
<li><a href="http://blog.takipi.com/" target="_blank" rel="external">Takipi Blog </a> : mainly focuses on Java and JVM languages</li>
<li><a href="http://coding-geek.com/" target="_blank" rel="external">Coding Geek - A blog about IT, programming and Java </a></li>
<li><a href="http://www.daedtech.com/" target="_blank" rel="external">Daedtech.com </a> : Stories about software</li>
<li><a href="http://www.askamanager.org/archives" target="_blank" rel="external">Archives — Ask a Manager </a> : HR related stuff</li>
</ul>
<h1 id="for-improving-your-english">用来提高你的英语</h1>

<ul>
<li><a href="https://www.quia.com/shared/english/" target="_blank" rel="external">Quia - English </a></li>
<li><a href="http://www.grammarbook.com/english_rules.asp" target="_blank" rel="external">标点符号和字母大小写规则</a></li>
<li><a href="http://grammar.ccc.commnet.edu/grammar/" target="_blank" rel="external">语法和写作指南</a></li>
<li><a href="https://owl.english.purdue.edu/" target="_blank" rel="external">Purdue大学在线写作实验室</a></li>
<li><a href="https://www.englishclub.com/learn-english.htm" target="_blank" rel="external">Englishclub.com/learn-english</a></li>
</ul>
<h1 id="when-you-get-bored-from-cs-related-stuff">当你厌倦了CS相关的东西</h1>

<ul>
<li><a href="https://www.reddit.com/r/ProgrammerHumor/" target="_blank" rel="external">r/ProgrammerHumor</a> : reddit的子论坛致力于听</li>
<li><a href="http://grammar.ccc.commnet.edu/grammar/" target="_blank" rel="external">Guide to Grammar and Writing</a> 针对那些想提高他们的英语技巧的人</li>
<li><a href="https://www.youtube.com/user/Vsauce/videos" target="_blank" rel="external">Vsauce </a> : 最好的youtube频道</li>
<li><a href="https://www.youtube.com/user/TEDtalksDirector/videos" target="_blank" rel="external">TED </a> : 关于技术，娱乐和设计的伟大演讲</li>
<li><a href="https://www.youtube.com/user/crashcourse/videos" target="_blank" rel="external">CrashCourse </a> : 各种科目的小班课程</li>
<li><a href="https://www.youtube.com/user/NationalGeographic/videos" target="_blank" rel="external">National Geographic </a> : 来自世界各地的高品质内容</li>
<li><a href="https://www.youtube.com/user/barcroftmedia/featured" target="_blank" rel="external">Barcroft TV</a> : 构成世界的各种各样的人的短小的纪录片</li>
<li><a href="https://www.youtube.com/user/coldfustion/videos" target="_blank" rel="external">ColdFusion </a> : 过去的当前的以及未来的技术</li>
<li><a href="https://www.youtube.com/user/destinws2/videos" target="_blank" rel="external">SmarterEveryDay </a> : 用高速相机捕获的关于我们周围世界的大量的惊人的科学信息</li>
<li><a href="https://www.youtube.com/user/scishow/videos" target="_blank" rel="external">SciShow </a> : 你总是想知道的一些有趣问题的答案</li>
<li><a href="https://www.youtube.com/user/bigthink/videos" target="_blank" rel="external">Big Think</a> : 专家驱动，内容可选，专家从总统到演员</li>
<li><a href="https://www.youtube.com/user/everyframeapainting/videos" target="_blank" rel="external">Every Frame a Painting </a> : 高质量的电影分析</li>
<li><a href="https://www.youtube.com/user/TestTubeNetwork/videos" target="_blank" rel="external">TestTube News</a> : 来自全世界的有趣的新闻</li>
<li><p><a href="http://reddit.com/" target="_blank" rel="external">Reddit the front page of the internet</a> : 适合有大把空闲时间的人</p>
<p><strong><em>Maintained with :heart: by sdmg15 &amp; al</em></strong></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;程序员应该访问的最佳网站中文版原版&quot;&gt;&lt;a href=&quot;#程序员应该访问的最佳网站中文版原版&quot; class=&quot;headerlink&quot; title=&quot;程序员应该访问的最佳网站中文版原版&quot;&gt;&lt;/a&gt;程序员应该访问的最佳网站中文版&lt;a href=&quot;https://github.com/sdmg15/Best-websites-a-programmer-should-visit&quot;&gt;原版&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;一些对程序员有用的网站&lt;/p&gt;
&lt;p&gt;在学习CS的时候有一些你必须知道的有用的站点来获取通知为了你的技术储备和学习新知识。这里是一个你应该访问的不是非常全面的一些站点的列表，这个列表会不断更新，只要我能得到链接，你也可以通过添加你知道的来为此做出贡献&lt;/p&gt;
    
    </summary>
    
      <category term="自我修炼" scheme="http://blog.greekw.com/categories/%E8%87%AA%E6%88%91%E4%BF%AE%E7%82%BC/"/>
    
    
      <category term="自我修炼" scheme="http://blog.greekw.com/tags/%E8%87%AA%E6%88%91%E4%BF%AE%E7%82%BC/"/>
    
      <category term="技术管理" scheme="http://blog.greekw.com/tags/%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>jdk源码阅读——ArrayList</title>
    <link href="http://blog.greekw.com/2016/11/09/jdk%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94%E2%80%94ArrayList/"/>
    <id>http://blog.greekw.com/2016/11/09/jdk源码阅读——ArrayList/</id>
    <published>2016-11-09T15:49:00.000Z</published>
    <updated>2017-03-11T13:08:49.479Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>个人观点：集合类和concurrent下的类是java里特别精髓的东西。<br><a id="more"></a></p>
<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1></blockquote>
<ul>
<li>类的定义</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ArrayList&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractList&lt;E&gt;</span></span></div><div class="line">        implements <span class="type">List</span>&lt;<span class="type">E</span>&gt;, <span class="type">RandomAccess</span>, <span class="type">Cloneable</span>, java.io.<span class="type">Serializable</span></div></pre></td></tr></table></figure>
<ul>
<li>类的继承关系</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">java<span class="selector-class">.lang</span><span class="selector-class">.Object</span></div><div class="line">    java<span class="selector-class">.util</span><span class="selector-class">.AbstractCollection</span>&lt;E&gt;</div><div class="line">        java<span class="selector-class">.util</span><span class="selector-class">.AbstractList</span>&lt;E&gt;</div><div class="line">            java<span class="selector-class">.util</span><span class="selector-class">.ArrayList</span>&lt;E&gt;</div></pre></td></tr></table></figure>
<ul>
<li>类的特点</li>
</ul>
<p><a href="http://blog.csdn.net/u014394255/article/details/53449122" target="_blank" rel="external">http://blog.csdn.net/u014394255/article/details/53449122</a></p>
<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</div></pre></td></tr></table></figure>
<p>此属性定义list的默认空间大小</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">transient</span> <span class="keyword">Object</span>[] elementData;</div></pre></td></tr></table></figure>
<p>此属性有序缓存数组元素，每增加一个元素，则，用transient修饰，表示不会序列化</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ul>
<li>初始化</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</div><div class="line">                                               initialCapacity);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>用指定的初始化容量初始化一个空的list</p>
<ul>
<li>toArray</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">Object</span>[] toArray() &#123;</div><div class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, <span class="built_in">size</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>indexOf</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="built_in">int</span> indexOf(<span class="keyword">Object</span> o) &#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</div><div class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>检查list中元素是否为null,或在list中的index</p>
<ul>
<li>elementData</li>
</ul>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@SuppressWarnings(<span class="string">"unchecked"</span>)</div><div class="line">    E elementData(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</div><div class="line">        <span class="keyword">return</span> (E) elementData[<span class="keyword">index</span>];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>返回访问操作元素位置对应的value</p>
<ul>
<li>add</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public void add(int <span class="keyword">index</span>, <span class="built_in">E</span> <span class="keyword">element</span>) &#123;</div><div class="line">        rangeCheckForAdd(<span class="keyword">index</span>);</div><div class="line"></div><div class="line">        ensureCapacityInternal(size + 1);  // Increments modCount!!</div><div class="line">        System.arraycopy(elementData, <span class="keyword">index</span>, elementData, <span class="keyword">index</span> + <span class="number">1</span>,</div><div class="line">                         size - <span class="keyword">index</span>);</div><div class="line">        elementData[<span class="keyword">index</span>] = <span class="keyword">element</span>;</div><div class="line">        size++;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>添加参数到list中，rangeCheckForAdd方法会index的上下界进行检查</p>
<ul>
<li>remove</li>
</ul>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> E remove(<span class="built_in">int</span> <span class="built_in">index</span>) &#123;</div><div class="line">        rangeCheck(<span class="built_in">index</span>);</div><div class="line"></div><div class="line">        modCount++;</div><div class="line">        E oldValue = elementData(<span class="built_in">index</span>);</div><div class="line"></div><div class="line">        <span class="built_in">int</span> numMoved = <span class="built_in">size</span> - <span class="built_in">index</span> - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">            System.arraycopy(elementData, <span class="built_in">index</span>+<span class="number">1</span>, elementData, <span class="built_in">index</span>,</div><div class="line">                             numMoved);</div><div class="line">        elementData[--<span class="built_in">size</span>] = null; // clear to let GC <span class="keyword">do</span> its work</div><div class="line"></div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>移除list指定位置的值，并释放gc</p>
<ul>
<li>线程安全</li>
</ul>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> void writeObject(java.io.ObjectOutputStream s)</div><div class="line">        throws java.io.IOException&#123;</div><div class="line">        // <span class="built_in">Write</span> <span class="keyword">out</span> element <span class="built_in">count</span>, and <span class="built_in">any</span> hidden stuff</div><div class="line">        <span class="built_in">int</span> expectedModCount = modCount;</div><div class="line">        s.defaultWriteObject();</div><div class="line"></div><div class="line">        // <span class="built_in">Write</span> <span class="keyword">out</span> <span class="built_in">size</span> as capacity for behavioural compatibility with clone()</div><div class="line">        s.writeInt(<span class="built_in">size</span>);</div><div class="line"></div><div class="line">        // <span class="built_in">Write</span> <span class="keyword">out</span> <span class="built_in">all</span> elements <span class="keyword">in</span> the proper order.</div><div class="line">        for (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">size</span>; i++) &#123;</div><div class="line">            s.writeObject(elementData[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (modCount <span class="comment">!= expectedModCount) &#123;</span></div><div class="line">            throw new ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>容量扩充</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> void grow(int minCapacity) &#123;</div><div class="line">        <span class="comment">// overflow-conscious code</span></div><div class="line">        int oldCapacity = elementData.length;</div><div class="line">        int <span class="keyword">new</span><span class="type">Capacity</span> = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Capacity</span> - minCapacity &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">new</span><span class="type">Capacity</span> = minCapacity;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Capacity</span> - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">new</span><span class="type">Capacity</span> = hugeCapacity(minCapacity);</div><div class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></div><div class="line">        elementData = Arrays.copyOf(elementData, <span class="keyword">new</span><span class="type">Capacity</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>设置最小的容量，来扩充list的大小；可以看出，oldCapacity 新增的容量是它的一半。另外，还有一个 hugeCapacity，如果需要扩充的容量比　MAX_ARRAY_SIZE 还大，会调用这个函数，重新调整大小。但再大也大不过　Integer.MAX_VALUE。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;个人观点：集合类和concurrent下的类是java里特别精髓的东西。&lt;br&gt;
    
    </summary>
    
      <category term="jdk源码阅读" scheme="http://blog.greekw.com/categories/jdk%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="源码阅读" scheme="http://blog.greekw.com/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="jdk" scheme="http://blog.greekw.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>Android之数据存储（一）</title>
    <link href="http://blog.greekw.com/2015/12/06/Android%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://blog.greekw.com/2015/12/06/Android之数据存储（一）/</id>
    <published>2015-12-05T16:11:00.000Z</published>
    <updated>2017-03-11T11:36:05.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>应用程序都具有数据的读取和写入功能，android应用也不例外，应用程序的设置参数，程序运行状态数据等需要保存的外部存储上，以防数据丢失。若应用程序只有少量数据需要保存，则用普通文件就可以，若应用程序有大量数据需要存储，访问，则需要借助数据库。因此本篇将介绍android的普通文件存储，android内置的数据SQLite的应用。<br><a id="more"></a></p>
<h3 id="一、数据存储简介"><a href="#一、数据存储简介" class="headerlink" title="一、数据存储简介"></a>一、数据存储简介</h3><p>应用程序都具有数据的读取和写入功能，android应用也不例外，应用程序的设置参数，程序运行状态数据等需要保存的外部存储上，以防数据丢失。若应用程序只有少量数据需要保存，则用普通文件就可以，若应用程序有大量数据需要存储，访问，则需要借助数据库。因此本篇将介绍android的普通文件存储，android内置的数据SQLite的应用。</p>
<h3 id="二、Android读写SharedPrefernce"><a href="#二、Android读写SharedPrefernce" class="headerlink" title="二、Android读写SharedPrefernce"></a>二、Android读写SharedPrefernce</h3><p>对于少量的数据，如何是否打开音效，是否提供振动效果等数据都可以用Android读写SharedPrefernce进行保存。<br><strong>(1).SharedPrefernce简介</strong><br>SharedPrefernce保存数据主要是类似配置信息格式的数据，保存的数据类型是key-value数值对。SharedPrefernce接口负责读取用于程序的数据，提供了如下等方法来访问SharedPrefernce的数据。</p>
</blockquote>
<ul>
<li><p>boolean contains(String key):判断SharedPrefernce是否包含该key;</p>
</li>
<li><p>Map  getAll(): 获取SharedPrefernce中所有的数据；</p>
</li>
<li><p>boolean getXxx(String key,Type value) :获取SharedPrefernce中指定的key对应的value.</p>
</li>
</ul>
<p>SharedPrefernce本身是一个接口，若需要创建该实例则需要通过Context提供的<br> getSharedPrefernces(String name,int model )方法类获取。其中model有如下两个参数值：<br>Context.MODEL_WORLD_READABLE 指定该数据只能被其他应用读，不能写；<br>Context.MODEL_WORLD_WRITEABLE:指定该数据只能被其他应用读写。</p>
<p>SharedPrefernce本身没有提供写入的方法，需要调用edit()方法获取对应的Editor对象，Editor提供了如下方法向SharedPrefernce写入数据:<br> 1.clear():清空SharedPrefernce中所有数据<br> 2.PutXxx( String key ,Type value):向SharedPrefernce指定的key存入value数据。<br> 3.remove(String key):删除SharedPrefernce指定key的数据<br> 4.Commit():提交修改的内容。</p>
<p><strong>（2）、程序实现</strong><br>下面通过一个例子介绍如何向SharedPrefernce写入数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharedPreferencesTest</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">	Button write,read;</div><div class="line">	SharedPreferences preference;</div><div class="line">	SharedPreferences.Editor editor;</div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.main);</div><div class="line">		<span class="comment">//写入和读取数据</span></div><div class="line">		write=(Button) findViewById(R.id.write);</div><div class="line">		read=(Button) findViewById(R.id.read);</div><div class="line">		<span class="comment">//获取</span></div><div class="line">		preference=getSharedPreferences(<span class="string">"greekw"</span>, Context.MODE_WORLD_READABLE);</div><div class="line">		editor=preference.edit();</div><div class="line">		</div><div class="line">		read.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">				<span class="keyword">int</span> flag=preference.getInt(<span class="string">"flag"</span>,<span class="number">0</span>);</div><div class="line">				String time=preference.getString(<span class="string">"time"</span>, <span class="keyword">null</span>);</div><div class="line">				String result = time == <span class="keyword">null</span> ? <span class="string">"您暂时还未写入数据"</span> : <span class="string">"写入时间为："</span> + time</div><div class="line">						+ <span class="string">"\n上次生成的随机数为："</span> + flag;</div><div class="line">				Toast.makeText(SharedPreferencesTest.<span class="keyword">this</span>, result,<span class="number">5000</span>).show();</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		</div><div class="line">		write.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">			</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">				SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 "</span></div><div class="line">						+ <span class="string">"hh:mm:ss"</span>);</div><div class="line">				editor.putString(<span class="string">"time"</span>,sdf.format(<span class="keyword">new</span> Date()));</div><div class="line">				editor.putInt(<span class="string">"flag"</span>, <span class="number">1</span>);</div><div class="line">				editor.commit();</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>上述例子说明读取和写入SharedPrefernce的数据，SharedPrefernce的数据保存在data/data/packageName的目录下，以xml格式保存。<br><strong>（3）、读写其他应用的SharedPrefernce</strong><br>读写其他拥有的SharedPrefernce，则需要获取该SharedPrefernce的应用指定的相应的权限。如该应用指定为Context.MODEL_WORLD_READABLE，表明该应用可被其他重新读取。写也类似。下面是读写其他应用的SharedPrefernce的步骤：<br>1.创建其他应用程序对应的Context. context=createPackageContext(“包结构”); anroid的包名是应用程序的唯一标识，因此可根据包名获取相应的Context.Context是Android的全局信息接口<br>2.调用其他应用的Context的SharedPrefernce获取相应的SharedPrefernce对象<br>3.调用其它应用的SharedPrefernce的editor()获取相应的Editor。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;应用程序都具有数据的读取和写入功能，android应用也不例外，应用程序的设置参数，程序运行状态数据等需要保存的外部存储上，以防数据丢失。若应用程序只有少量数据需要保存，则用普通文件就可以，若应用程序有大量数据需要存储，访问，则需要借助数据库。因此本篇将介绍android的普通文件存储，android内置的数据SQLite的应用。&lt;br&gt;
    
    </summary>
    
      <category term="android开发" scheme="http://blog.greekw.com/categories/android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="android" scheme="http://blog.greekw.com/tags/android/"/>
    
      <category term="数据存储" scheme="http://blog.greekw.com/tags/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>git教程详解（一）</title>
    <link href="http://blog.greekw.com/2015/11/27/git%E6%95%99%E7%A8%8B%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://blog.greekw.com/2015/11/27/git教程详解（一）/</id>
    <published>2015-11-27T07:47:17.000Z</published>
    <updated>2017-03-11T11:36:05.401Z</updated>
    
    <content type="html"><![CDATA[<p>git是一个很好的分布式版本管理工具，在git中，版本库又叫仓库，英文名为repository，可以简单的理解为本地的一个目录，用git进行管理，目录内的文件git进行删除，修改等操作时，git都可以跟踪，从而记录仓库的操作历史。<br><a id="more"></a></p>
<h4 id="一、git简介"><a href="#一、git简介" class="headerlink" title="一、git简介"></a><strong>一、git简介</strong></h4><p>git中，版本库又叫仓库，英文名为repository，可以简单的理解为本地的一个目录，用git进行管理，目录内的文件git进行删除，修改等操作时，git都可以跟踪，从而记录仓库的操作历史。</p>
<h3 id="二、创建仓库"><a href="#二、创建仓库" class="headerlink" title="二、创建仓库"></a><strong>二、创建仓库</strong></h3><p>在本地创建一个目录，如/user/temp/test/，然后在此目录下执行git init，就可将目录变成git管理的仓库。<br><img src="http://img.blog.csdn.net/20151127202612430" alt="这里写图片描述"><br>执行完后，是一个空仓库，包含一个隐藏的.git目录，若没看到该目录，linux上可以用 ls -ah 查看.<br><strong>(1).将文件添加到版本库</strong><br>所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，<br>只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道    。<br>1.现在在test目录或其子目录下添加一个readme.txt ,将该文件放到git仓库方式如下:<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> readme.text</span></div><div class="line">git commit -m <span class="string">"add new file"</span></div></pre></td></tr></table></figure></p>
<p>上述命令中 -m 为本次提交的注释，是为了方便他人查看，所以需要加上。<br>2.若git想批量添加文件，可以将多个文件用逗号分隔，然后commit。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> <span class="built_in">test</span>1.txt <span class="built_in">test</span>2.txt</span></div><div class="line">git commit -m <span class="string">"add new file"</span></div></pre></td></tr></table></figure></p>
<p><strong>(2).查看仓库的状态</strong><br>git status命令可以让我们时刻掌握仓库当前的状态。如图:</p>
<p>上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改。<br>git diff可以告诉我们修改了什么内容。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">git</span> <span class="selector-tag">diff</span> <span class="selector-tag">readme</span><span class="selector-class">.txt</span></div></pre></td></tr></table></figure></p>
<p><strong>(3).版本回退</strong><br>git会将修改的文件保存一个快照，一旦你把文件修改乱了或误删除文件，可以从最近的快照恢复，而不影响工作。</p>
<ul>
<li><p>git log 查看版本控制系统的修改记录<br> <img src="http://img.blog.csdn.net/20151127203423789" alt="这里写图片描述"><br> git log命令显示从最近到最远的提交日志，上述操作我们可以看到有2次提交，每次提交后，都会有一个commit Id(版本号).</p>
</li>
<li><p>git reset 回退版本</p>
<p> Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。<br>git reset – hard HEAD^ 比如要将当前版本回退到上一个版本 ,HEAD^也可换成版本号.</p>
</li>
<li><p>git reflog 恢复版本</p>
<p> 当你用 $ git reset –hard HEAD^</p>
<p> 回退到上一个版本时，再想恢复回来，就必须找到恢复版本的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：git reflog<br> <img src="http://img.blog.csdn.net/20151127203653884" alt="这里写图片描述"><br><strong>(4)删除文件</strong><br>1.一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了  $ rm test.txt<br>2.git rm file 从版本库删除该文件，并且git commit<br>3.git checkout – test.txt 用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>
</li>
</ul>
<h3 id="三、远程仓库"><a href="#三、远程仓库" class="headerlink" title="三、远程仓库"></a><strong>三、远程仓库</strong></h3><p>远程仓库可以是在一台运行git的服务器上创建一个的仓库。类似网站如gitcafe ,github等都可进行仓库的托管。只要注册一个账号，可以获得免费的远程仓库。<br>由于在github上，你本地仓库和远程仓库的传输是通过ssh加密的。所以需要进行如下设置:<br>1.创建SSH key<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh-keygen</span> <span class="selector-tag">-t</span> <span class="selector-tag">rsa</span> <span class="selector-tag">-C</span> "***********@<span class="keyword">163</span>.<span class="keyword">com</span>"</div></pre></td></tr></table></figure></p>
<p>创建成功后，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。<br>2.登录github，配置ssh key ，如图所示:</p>
<p><img src="http://img.blog.csdn.net/20151127203849320" alt="这里写图片描述"></p>
<p>图中的Title任意填上，在Key文本框里粘贴id_rsa.pub文件的内容。<br>github 支持添加多个不同的key,假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了.<br><strong>(1)、添加仓库</strong><br>在上面操作配置好ssh key 后，就可以创建远程git仓库了，在github上，在右上角找到“Create a new repo”按钮，创建一个新的仓库。如图所示<br><img src="http://img.blog.csdn.net/20151127204002038" alt="这里写图片描述"></p>
<p>创建好仓库后，需要和你本地的仓库进行关联，然后把本地的内容push到远程仓库中，则你需要在的本地库目录下，执行如下操作:<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote <span class="keyword">add</span><span class="bash"> origin git@github.com:igreek/Timber.git</span></div></pre></td></tr></table></figure></p>
<p>执行后，你的远程库为origin。但此时还是没有内容，若把关联的本地库的内容push到origin上，则需要执行如下操作:</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</div></pre></td></tr></table></figure>
<p>参数-u:第一次push时需要，以后可以省略。<br>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样。</p>
<p><strong>(2)、从远程库克隆</strong><br>假如没有在本地创建仓库，在远程创建了一个仓库，想把远程仓库的内容克隆到本地的一个目录下。可以执行如下操作:<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> <span class="title">origin</span> git@github.com:igreek/Timber.git</div></pre></td></tr></table></figure></p>
<p>从上面的操作都是使用ssh协议，其实也可以其他的https协议，但它速度有些慢，端口有限制。</p>
<p>总结:本篇主要介绍了git的作用，git 与其他版本工具的一些差异，git的创建仓库以及如何管理仓库等功能，涉及到一些git命令需要熟悉，git也是一个很实用的分布式系统，下篇将介绍git的分支管理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git是一个很好的分布式版本管理工具，在git中，版本库又叫仓库，英文名为repository，可以简单的理解为本地的一个目录，用git进行管理，目录内的文件git进行删除，修改等操作时，git都可以跟踪，从而记录仓库的操作历史。&lt;br&gt;
    
    </summary>
    
      <category term="git教程" scheme="http://blog.greekw.com/categories/git%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="git" scheme="http://blog.greekw.com/tags/git/"/>
    
      <category term="版本管理" scheme="http://blog.greekw.com/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>核心java系列——I/O流详解（一）</title>
    <link href="http://blog.greekw.com/2015/11/24/%E6%A0%B8%E5%BF%83java%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94I-O%E6%B5%81%E8%AF%A6%E8%A7%A3(%E4%B8%80)/"/>
    <id>http://blog.greekw.com/2015/11/24/核心java系列——I-O流详解(一)/</id>
    <published>2015-11-24T07:47:17.000Z</published>
    <updated>2017-03-11T11:36:05.401Z</updated>
    
    <content type="html"><![CDATA[<p>流的概念流是一系列有顺序的字节的集合，是网络传输的载体，流可以包装成基本数据类型或对象，流有输入和输出，输入时是从流从数据源流向程序输出时是流从程序传向数据源，而数据源可以是内存，文件，网络或程序等。<br><a id="more"></a></p>
<h3 id="一、流的概念"><a href="#一、流的概念" class="headerlink" title="一、流的概念"></a>一、流的概念</h3><p>流是一系列有顺序的字节的集合，是网络传输的载体，流可以包装成基本数据类型或对象，流有输入和输出，输入时是从流从数据源流向程序输出时是流从程序传向数据源，而数据源可以是内存，文件，网络或程序等，下面是流的输入和输出的图形化：<br><img src="http://img.blog.csdn.net/20151126200300792" alt="这里写图片描述"></p>
<h3 id="二、流的分类"><a href="#二、流的分类" class="headerlink" title="二、流的分类"></a>二、流的分类</h3><p><strong>(1)、流有字节流，字符流，输入流和输出流等。</strong></p>
<ul>
<li>根据处理方向不同可分为：输入流和输出流。</li>
<li>根据处理数据类型不同可分为：字节流和字符流。<br>字节流和字符流的处理原理是相同的，只是处理的数据类型不同。<br>字节流是以字节为单位来传输，一个字节是8bit;<br>字符流是以字符为单位来传输，一个字符是16bit。</li>
<li>根据分工的不同可分为：节点流和处理流</li>
</ul>
<p><strong>(2)、java I/O流基本类有</strong><br>字节流的抽象基类：<br>InputStream(字节输入流),OutputStream(字节输出流)<br>字符流的抽象基类:<br>Reader(字符输入流)，writer(字符输出流)<br>其他类都由这4个抽象基本派生出来，详细的流的类图结构如下:<br><img src="http://img.blog.csdn.net/20151126200445656" alt="这里写图片描述"></p>
<h3 id="三、输入和输出流"><a href="#三、输入和输出流" class="headerlink" title="三、输入和输出流"></a>三、输入和输出流</h3><p><strong>(1)、输入可使用：</strong><br>1.InputStream – 一个字节一个字节(byte)地从数据源读取。<br><em>读取一个字节并以整数的形式返回(0~255),如果返回-1已到输入流的末尾。<br>int read() ；
</em>读取一系列字节并存储到一个数组buffer，返回实际读取的字节数，如果读取前已到输入流的末尾返回-1。<br>int read(byte[] buffer) ；<br><em>读取length个字节并存储到一个字节数组buffer，从off位置开始存,最多len， 返回实际读取的字节数，如果读取前以到输入流的末尾返回-1。<br>int read(byte[] buffer, int off, int len)  ；                  
</em>关闭流释放内存资源。<br>void close() ;<br>2.Reader – 一个字符一个字符(char)地从数据源读取。<br><em>读取一个字符并以整数的形式返回(0~255),如果返回-1已到输入流的末尾。<br>int read() ；
</em>读取一系列字符并存储到一个数组buffer，返回实际读取的字符数，如果读取前已到输入流的末尾返回-1。<br>int read(char[] cbuf) ；<br><em>读取length个字符,并存储到一个数组buffer，从off位置开始存,最多读取len，返回实际读取的字符数，如果读取前以到输入流的末尾返回-1。<br>int read(char[] cbuf, int off, int len)                  
</em>关闭流释放内存资源。<br>void close()<br><strong>(2)、输入流可使用</strong><br>1.OutputStream:<br><em>向输出流中写入一个字节数据,该字节数据为参数b的低8位。<br>void write(int b) ;
</em>将一个字节类型的数组中的数据写入输出流。<br>void write(byte[] b);<br><em>将一个字节类型的数组中的从指定位置（off）开始的,len个字节写入到输出流。<br>void write(byte[] b, int off, int len);
</em>关闭流释放内存资源。<br>void close();<br>*将输出流中缓冲的数据全部写出到目的地。<br>void flush();</p>
<p>2.Writer:<br><em>向输出流中写入一个字符数据,该字节数据为参数b的低16位。<br>void write(int c);
</em>将一个字符类型的数组中的数据写入输出流，<br>void write(char[] cbuf) throws IOException<br><em>将一个字符类型的数组中的从指定位置（offset）开始的,length个字符写入到输出流。<br>void write(char[] cbuf, int offset, int length);
</em>将一个字符串中的字符写入到输出流。<br>void write(String string);<br><em>将一个字符串从offset开始的length个字符写入到输出流。<br>void write(String string, int offset, int length);
</em>关闭流释放内存资源。<br>void close() throws IOException<br>*将输出流中缓冲的数据全部写出到目的地。<br>void flush() throws IOException</p>
<h3 id="四、读写文本文件"><a href="#四、读写文本文件" class="headerlink" title="四、读写文本文件"></a>四、读写文本文件</h3><p><strong>(1).写文本文件</strong><br>1.FileWriter是继承writer类，可调用write()方法往文本中写入内容。下面程序为调用FileWriter类的write(type c)方法的实现:</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">String</span> fileName=<span class="string">"d:\\demo1.txt"</span>;</div><div class="line">FileWriter <span class="built_in">write</span>=<span class="keyword">new</span> FileWriter(fileName);</div><div class="line"><span class="built_in">write</span>.<span class="built_in">write</span>(<span class="string">"hell,io\n"</span>);</div><div class="line"><span class="built_in">write</span>.<span class="built_in">write</span>(<span class="string">"welcome to study\n"</span>);</div><div class="line"><span class="built_in">write</span>.<span class="built_in">write</span>(<span class="string">"加油，谢谢！"</span>);</div><div class="line"><span class="built_in">write</span>.<span class="built_in">close</span>();</div></pre></td></tr></table></figure>
<p>2.BufferedWriter类是带缓冲区的，比FileWriter要高效些，若写入的内容多优先使用此类，此类有一个newLine()方法，可换行。<br>下面程序为BufferedWriter类write(type c)方法的实现:</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//处理内容较多的数据是，用BufferedWriter更高效</span></div><div class="line">BufferedWriter bWrite=<span class="keyword">new</span> <span class="type">BufferedWriter</span>(<span class="keyword">new</span> <span class="type">FileWriter</span>(fileName));</div><div class="line">bWrite.write(<span class="string">"hell,io"</span>);</div><div class="line">bWrite.<span class="keyword">new</span><span class="type">Line</span>();</div><div class="line">bWrite.write(<span class="string">"welcome to study"</span>);</div><div class="line">bWrite.<span class="keyword">new</span><span class="type">Line</span>();</div><div class="line">bWrite.write(<span class="string">"加油，谢谢！"</span>);</div><div class="line">bWrite.close();</div></pre></td></tr></table></figure>
<p>不论使用哪种方式，结束时都需要close()关闭流，否则会导致资源耗尽问题。<br><strong>(2).读文本文件</strong><br>1.FileReader类是从文本文件读取字符，下面代码为FileReader类读取文本文件的实现，返回的是一个int类型数。若读取到末尾，则返回-1，下面为具体的实现:</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FileReader <span class="built_in">read</span>=<span class="keyword">new</span> FileReader(fileName);</div><div class="line"><span class="keyword">int</span> len=<span class="built_in">read</span>.<span class="built_in">read</span>();</div><div class="line"><span class="built_in">while</span>(len!=<span class="number">-1</span>)&#123;</div><div class="line">	System.out.<span class="built_in">println</span>(<span class="string">"len:"</span>+len);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>2.BufferedReader类是文本文件读取的缓存器类，调用readLine()方法，可一行一行的读取出整行字符，若读取到末尾返回null,下面为具体的实现:</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BufferedReader <span class="built_in">read</span>=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(fileName));</div><div class="line"><span class="keyword">String</span> <span class="built_in">line</span>=<span class="built_in">read</span>.readLine();</div><div class="line"><span class="built_in">while</span>(<span class="built_in">line</span>!=null)&#123;</div><div class="line">	System.out.<span class="built_in">println</span>(<span class="string">"line:"</span>+<span class="built_in">line</span>);</div><div class="line">	<span class="built_in">line</span>=<span class="built_in">read</span>.readLine();</div><div class="line">&#125;</div><div class="line"><span class="built_in">read</span>.<span class="built_in">close</span>();</div></pre></td></tr></table></figure>
<p>同时不论使用哪种方式，结束时都需要调用close()关闭流，否则会导致资源耗尽问题.</p>
<h3 id="五、读写二进制数据"><a href="#五、读写二进制数据" class="headerlink" title="五、读写二进制数据"></a>五、读写二进制数据</h3><p>对于纯文本文件里的内容都可解释为字符，可以用Reader和writer进行读写，但对于那些图片，声音的不是纯文本的内容，则需要利用二进制的字节方式进行读写，利用二进制字节读取数据要比字符快，且编码问题小。<br><strong>(1).写二进制字节数据</strong><br>FileOutputStream类:用于字节的输出；DataOutputStream类:用于将数据写到另一个输出流。下面为具体的实现:</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DataOutputStream <span class="keyword">out</span> =<span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(fileName));</div><div class="line"><span class="keyword">out</span>.writeInt(<span class="number">1</span>);</div><div class="line"><span class="keyword">out</span>.writeDouble(<span class="number">11.20</span>);</div><div class="line"><span class="keyword">out</span>.writeUTF(<span class="string">"test"</span>);</div><div class="line"><span class="keyword">out</span>.close();</div></pre></td></tr></table></figure>
<p><strong>(2).读二进制文件</strong></p>
<p>通过另外一个流来构造一个过滤流，常用的子类有<br>DataInputStream 和 BufferedInputStream。后者是将字节数据读取到缓冲区.相对要高效些。下面为具体的实现:</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">String</span> fileName=<span class="string">"d:\\demo.dat"</span>;</div><div class="line">DataInputStream <span class="keyword">in</span>=<span class="keyword">new</span><span class="type"></span>	DataInputStream(<span class="keyword">new</span> <span class="type">BufferedInputStream</span>(<span class="keyword">new</span> <span class="type">FileInputStream</span>(fileName)));</div><div class="line">System.out.println(<span class="keyword">in</span>.readInt()+<span class="string">"-"</span>+<span class="keyword">in</span>.readDouble()+<span class="string">"-"</span>+<span class="keyword">in</span>.readUTF());</div><div class="line"><span class="keyword">in</span>.close();</div></pre></td></tr></table></figure>
<p>还有几个特殊的类,如:<br>LineNumberInputStream:构造一个读取指定的输入流的输入​​的新行号输入流。<br>PushbackInputStream:构建一个可预览一个字节或具有指定尺寸的缓冲区的流。<br>总结：本文主要分析了流的作用，流的分类，流的类图结构以及流的一些操作，比较基础，下篇将介绍流的文件管理，文档的压缩和对象序列化等操作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;流的概念流是一系列有顺序的字节的集合，是网络传输的载体，流可以包装成基本数据类型或对象，流有输入和输出，输入时是从流从数据源流向程序输出时是流从程序传向数据源，而数据源可以是内存，文件，网络或程序等。&lt;br&gt;
    
    </summary>
    
      <category term="核心java" scheme="http://blog.greekw.com/categories/%E6%A0%B8%E5%BF%83java/"/>
    
    
      <category term="java" scheme="http://blog.greekw.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>核心java系列——异常处理机制</title>
    <link href="http://blog.greekw.com/2015/11/24/%E6%A0%B8%E5%BF%83java%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <id>http://blog.greekw.com/2015/11/24/核心java系列——异常处理机制/</id>
    <published>2015-11-24T07:47:17.000Z</published>
    <updated>2017-03-11T11:36:05.416Z</updated>
    
    <content type="html"><![CDATA[<p>异常是程序中一种错误，可能是读取文件错误，网络连接错误，也可能是数组越界错误，或试图使用一个没有被赋值的对象而引起的错误。如果由于异常或错误使程序操作没有操作完成，则程序返回一个安全状态或捕获异常的处理结果，保证程序的健壮性。<br><a id="more"></a></p>
<h3 id="一、什么是异常"><a href="#一、什么是异常" class="headerlink" title="一、什么是异常"></a><strong>一、什么是异常</strong></h3><blockquote>
<p>异常是程序中一种错误，可能是读取文件错误，网络连接错误，也可能是数组越界错误，或试图使用一个没有被赋值的对象而引起的错误。如果由于异常或错误使程序操作没有操作完成，则程序返回一个安全状态或捕获异常的处理结果，保证程序的健壮性。</p>
</blockquote>
<p>####（1）.异常分类<br>java语言中，定义了许多的异常类，所有异常类都派生Throwable类，而Throwable类又有两个子类Error和Exception，分别表示错误和异常，<br>其中Exception又分为运行时异常和非运行时异常。下面为异常的体系结构图：<br><img src="http://img.blog.csdn.net/20151124185612756" alt="这里写图片描述"></p>
<p>####（2）.下面将详细说明图中相关异常的区别和联系<br><strong>1.Error和Exception</strong><br>  Error是程序无法处理的错误，通常有内存溢出异常(outofMemoryError)，线程终止等，出现这类异常java虚拟机会选择终止程序。<br> Exception是程序可处理的异常，它又有两个分支运行时异常和非运行时异常，出现这类异常是程序需要处理。<br><strong>2.运行时异常和非运行时异常</strong><br> 运行时异常都是RuntimeException类及其子类异常，如NullPointerException、 IndexOutOfBoundsException等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引 起的，程序应该从逻辑角度尽可能避免这类异常的发生。<br> 非运行时异常是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，<br>如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常。</p>
<h4 id="3-什么时候抛出异常"><a href="#3-什么时候抛出异常" class="headerlink" title="(3).什么时候抛出异常"></a>(3).什么时候抛出异常</h4><p>如果遇到无法处理的问题时，该方法可以选择抛出异常，至于何时需要在方法中用throws声明异常，若该方法需要抛出多个异常，则每个异常间用逗号分隔，通常有以下情况需要抛出异常：<br>1.调用一个已抛出异常的方法，如FileInputStream构造器。<br>2.程序运行过程错误，并用throw抛出一个检查出的异常。<br>3.程序出现错误。<br>4.java虚拟机和运行时库出现的内部异常。<br>总之一个方法必须声明所有可能抛出的异常已检查异常，所有未检查出的异常要么不可控制，要么就应该避免发生。</p>
<h4 id="4-创建异常"><a href="#4-创建异常" class="headerlink" title="(4).创建异常"></a>(4).创建异常</h4><p>创建异常通常只需要定义派生于Exception类或派生于Exception子类的类。例如定义一个派生于IOException的类，通常定义两个构造器，一个是默认构造器，一个是带有详细描述信息的构造器。如:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExcetion</span> <span class="keyword">extends</span> <span class="title">IOException</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyExcetion</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyExcetion</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(message);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyExcetion</span><span class="params">(Throwable cause)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(cause);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyExcetion</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(message, cause);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、异常处理"><a href="#二、异常处理" class="headerlink" title="二、异常处理"></a><strong>二、异常处理</strong></h3><p>程序运行过程中，若出现异常没有及时处理，则会终止程序的执行。可以用捕获异常或抛出异常来处理。<br>若try语句代码块出现异常，程序会在catch中寻找匹配的异常，然后调用匹配的异常处理器进行处理。运行过程中程序未找到匹配的异常处理器，程序就会终止。<br><strong>(1).try…catch模式</strong><br>该模式的定义形式如下<br>try{<br>  代码块；<br>  }catch(Exception e){<br>  }<br>  Catch(Exception e2){ }</p>
<p>匹配的原则是：如果抛出的异常对象属于catch子句的异常类，或者属于该异常类的子类，则认为生成的异常对象与catch块捕获的异常类型相匹。<br><strong>(2).try…catch…finally模式</strong><br>该模包含finally,无论程序有无异常发生，且不管try –catch间是否顺利执行，都会执行finally语句。<br><strong>(3).实例说明：</strong><br>1.各模块的作用<br>try块:用于捕获异常，后面可以跟一个或多个catch，finally可有可无，但必须有一个catch块。<br>catch块:用于处理异常。<br>finally块是程序是否有无异常，都需要执行的部分。<br>但在以下3中特殊情况下不会执行：<br>A．在finally 语句中发生异常。<br>B．程序所在线程死亡。<br>C．在前面的代码中出现了system.exit()退出程序。<br>2.当捕获到一个异常对象之后，你可以调用其getMessage()方法来获取异常消息，或者调用printStackTrace()方法来打印执行栈的内容<br>关于getMessage()方法<br>当你通过new Exception(“message”)或new RuntimeException(“message”)来创建一个异常对象的时候，传给构造方法的这个参数就是消息，所以，当你捕获到异常对象之后，可以通过getMessage()方法把消息拿出来！<br>关于printStackTrace()方法它能把执行栈的内容打印出来</p>
<h3 id="三、异常的转换"><a href="#三、异常的转换" class="headerlink" title="三、异常的转换"></a><strong>三、异常的转换</strong></h3><p>所谓异常转换，即截获一个异常（往往是checked exception）之后，将其转换为另外一个异常（往往是unchecked exception）抛出。<br>比如很多情况下，当我们操作数据库的时候或操作文件的时候，JDK类库中的相关操作方法会给我们抛出SQLException或IOException，这些都是checked exception，这些异常一般情况下我们是无法进行处理的，所以，我们需要继续向上抛出异常，假如我们继续抛出SQLException或IOException的话，会导致更上层的程序处理起来非常困难（而且也需要在方法中进行声明）。<br>因此，大多数情况下，我们在截获到SQLException或IOException之后，会将它转换为一种RuntimeException重新抛出，这是非常常见的异常应用技巧！</p>
<h3 id="四、异常链"><a href="#四、异常链" class="headerlink" title="四、异常链"></a><strong>四、异常链</strong></h3><p>所谓异常链，即当我们在截获一个异常，在把它转换为另外一个异常的时候，记得把原来那个异常对象设置到新的异常对象中即可。我们不妨观察Throwable类（所有异常类的基类）的构造方法:<br>public Throwable()<br>public Throwable(String message)<br>public Throwable(String message, Throwable cause)<br>public Throwable(Throwable cause)<br>我们注意到其中的Throwable类型的参数，它就是用来创建异常链的。<br>下面使用一个实例来说明:<br><strong>1.自定义异常类：</strong></p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword"><span class="keyword">extends</span> <span class="type">RuntimeException</span></span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> final long serialVersionUID = <span class="number">1</span>L;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">String</span> errorCode;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> MyException() &#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> MyException(<span class="keyword">String</span> message,<span class="keyword">String</span> errorCode) &#123;</div><div class="line">		<span class="keyword">super</span>(message);</div><div class="line">		<span class="built_in">this</span>.errorCode=errorCode;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//用于创建异常链</span></div><div class="line">	<span class="keyword">public</span> MyException(<span class="keyword">String</span> message,<span class="keyword">String</span> errorCode,Throwable cause) &#123;</div><div class="line">		<span class="keyword">super</span>(message, cause);</div><div class="line">		<span class="built_in">this</span>.errorCode=errorCode;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">String</span> getErrorCode() &#123;</div><div class="line">		<span class="keyword">return</span> errorCode;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2.调用该类</strong></p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> readFile(<span class="keyword">String</span> filePath)&#123;</div><div class="line">		StringBuffer sb=<span class="keyword">new</span> <span class="type">StringBuffer</span>();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			BufferedReader reader=<span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(filePath));</div><div class="line">			<span class="keyword">String</span> line=<span class="literal">null</span>;</div><div class="line">			<span class="keyword">while</span>((line=reader.readLine())!=<span class="literal">null</span>)&#123;</div><div class="line">				sb.append(line);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			<span class="comment">//将原始对象放到新对象中去</span></div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">MyException</span>(<span class="string">"文件没有找到！"</span>, <span class="string">"1"</span>, e);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">MyException</span>(<span class="string">"文件读取有误！"</span>, <span class="string">"2"</span>, e);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> sb.toString();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a><strong>五、注意事项</strong></h3><p>1)  必须在 try 之后添加 catch 或 finally 块。try 块后可同时接 catch 和 finally 块，但至少有一个块。<br>2) 必须遵循块顺序：若代码同时使用 catch 和 finally 块，则必须将 catch 块放在 try 块之后。<br>3) 一个 try 块可能有多个 catch 块。若如此，则执行第一个匹配块<br>即Java虚拟机会把实际抛出的异常对象依次和各个catch代码块声明的异常类型匹配，如果异常对象为某个异常类型或其子类的实例，就执行这个catch代码块，不会再执行其他的 catch代码块。<br>4) 可嵌套 try-catch-finally 结构。<br>5) 在 try-catch-finally 结构中，可重新抛出异常。<br>6)多个catch的顺序一定要遵循子类在上父类在下的规则。<br>7)一个方法被重写，被重写的方法必须抛出相同的异常或异常的子类。<br>8)若父类方法抛出多个异常，那子类重写该方法必须抛出哪些异常的一个子集。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异常是程序中一种错误，可能是读取文件错误，网络连接错误，也可能是数组越界错误，或试图使用一个没有被赋值的对象而引起的错误。如果由于异常或错误使程序操作没有操作完成，则程序返回一个安全状态或捕获异常的处理结果，保证程序的健壮性。&lt;br&gt;
    
    </summary>
    
      <category term="核心java" scheme="http://blog.greekw.com/categories/%E6%A0%B8%E5%BF%83java/"/>
    
    
      <category term="java" scheme="http://blog.greekw.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>核心java系列-抽象类和接口</title>
    <link href="http://blog.greekw.com/2015/11/20/%E6%A0%B8%E5%BF%83java/"/>
    <id>http://blog.greekw.com/2015/11/20/核心java/</id>
    <published>2015-11-20T11:17:27.000Z</published>
    <updated>2017-03-11T11:36:05.401Z</updated>
    
    <content type="html"><![CDATA[<p>##简介</p>
<blockquote>
<p>java中，抽象类和接口是支持抽象概念的两种机制，因为它们的存在，赋予了java强大的面向对象编程能 力。接口抽象类在抽象定义上有很多相似地方，甚至可以相互替换。但它们还是有区别的，下面从接口，抽象类以及两者的区别等方面来分析。<br><a id="more"></a></p>
<p>##一、抽象类<br><strong>在面向对象领域，一切都可以理解为对象，对象可以用类来描述。但不是所有的类都是来描述对象的。这些类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。</strong><br>抽象类往往用来表征我们在对问题领域进行分析、 设计中得出的抽象概念，是对一些类的本质的抽象。比如在车子的类别中，有自行车，桥车，它们的本质属性都可以归类为车，但这个车不能描述出自行车和桥车的区别，需要通过自行车的定义来具体描述车的性质，所以车可以理解为一个抽象类的概念。<br>(1).在面向对象中，抽象类是不能是实例化的，在抽象类中可以定义一组抽象方法，即没有具体实现的方法，在方法前加上abstract关键字来修饰。这些抽象方法的实现需要具体的派生类去实现。<br>(2)抽象类也可以继承，其目的也是为了体现继承，抽取出类的相同性质，体现OOP原则。所以在使用抽象类时需要注意以下几点:</p>
<ol>
<li>抽象类不能被实例化，若一个类包含了一个以上的抽象方法，那么这个类也必须定义为抽象类（即必须也用abstract来修饰这个类）。</li>
<li>抽象类的抽象方法必须由其其子类实现。</li>
<li>抽象类中可以保护具体的实现方法，也可以不包含抽象方法</li>
<li>abstract不能与final并列修饰同一个类。</li>
<li>abstract 不能与private、static、final或native并列修饰同一个方法。</li>
</ol>
</blockquote>
<p>下面通过一个实例来说明</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"鸟会吃虫子..."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Eagle</span> <span class="keyword">extends</span> <span class="title">Bird</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">crash</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"Eagle...会抓老鼠"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parrot</span> <span class="keyword">extends</span> <span class="title">Bird</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sign</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"Parrot "</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbtractTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Bird b1=<span class="keyword">new</span> Parrot();</div><div class="line">		Bird b2=<span class="keyword">new</span> Eagle();</div><div class="line">		b1.fly();</div><div class="line">		b2.fly();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##二、接口<br>接口不是类，是类的功能的描述，不能实例化一个接口，只能new接口的实现类。它比抽象类更加抽象。接口是类所依赖的一种规范化形式，没有具体的实现方法，若实现该接口类，则必须实现该接口的所有方法，用implements是实现，接口的定义由interface声明。<br>接口是对抽象类的一种可扩展，因为抽象类是不能实现多继承的，但接口可以实现多继承，各被继承的接口由逗号分隔，当然接口和抽象类可以联合使用，如 A extends B implements C,D{};<br>在接口使用中需要注意以下几点：<br>1.接口中的所有方法必须要被实现。<br>2.接口只可以定义不可变的成员变量。如 static final String  A_PARAM=””;<br>3.接口不能用new去实例化,但可以声明一个接口变量，该变量必须引用一个实现该接口的类的对象，可以使用 instanceof 检查一个对象是否实现了某个特定的接口。例如：if(anObject instanceof Comparable){}。<br>实例介绍如下:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">	<span class="meta">#接口</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Common</span> &#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) throws Exception</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">#实现类</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CommonImpl</span> <span class="title">implements</span> <span class="title">Common</span> &#123;</div><div class="line">		@<span class="function">Override</span></div><div class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) throws Exception &#123;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InterfaceTest</span> &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) throws Exception </span>&#123;</div><div class="line">		CommonImpl cl=<span class="keyword">new</span> CommonImpl();</div><div class="line">		cl.run();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##三、接口和抽象类的区别<br>尽管接口和和抽象类有很多相似处，都是用来被继承或被实现，但也有区别，下面从方式的实现，构造器，访问修饰符，多继承，效率等方面进行比较:<br>| 参数     |    抽象类 | 接口  |<br>| :——– | ——–:| :–: |<br>| 默认的方法实现  | 它可以有默认的方法实现 | 接口完全是抽象的,它根本不存在方法的实现 |<br>| 实现    |   子类使用extends关键字来继承抽象类。如果子类不是抽象类的话，它需要提供抽象类中所有声明的方法的实现。|子类使用关键字implements来实现接口。它需要提供接口中所有声明的方法的实现 |<br>|构造器      |   抽象类可以有构造器| 接口不能有构造器  |<br>|修饰符     |    抽象方法可以有public、protected和default这些修饰符 | 接口方法默认修饰符是public。你不可以使用其它修饰符。  |<br>|main方法      |   抽象方法可以有main方法并且我们可以运行它| 接口没有main方法，因此我们不能运行它。  |<br>|多继承      |    抽象方法可以继承一个类和实现多个接口 | 接口只可以继承一个或多个其它接口|<br>|效率      |    它比接口速度要快 | 接口是稍微有点慢的，因为它需要时间去寻找在类中实现的方法。 |<br>|添加新方法    |    如果你往抽象类中添加新的方法，你可以给它提供默认的实现。因此你不需要改变你现在的代码。 | 如果你往接口中添加方法，那么你必须改变实现该接口的类。  |</p>
<p>##四、总结<br>1.如果你拥有一些方法并且想让它们中的一些有默认实现，那么使用抽象类吧。<br>2.如果你想实现多重继承，那么你必须使用接口。由于Java不支持多继承，子类不能够继承多个类，但可以实现多个接口。因此你就可以使用接口来解决它。<br>3.如果基本功能在不断改变，那么就需要使用抽象类。如果不断改变基本功能并且使用接口，那么就需要改变所有实现了该接口的类。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##简介&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;java中，抽象类和接口是支持抽象概念的两种机制，因为它们的存在，赋予了java强大的面向对象编程能 力。接口抽象类在抽象定义上有很多相似地方，甚至可以相互替换。但它们还是有区别的，下面从接口，抽象类以及两者的区别等方面来分析。&lt;br&gt;
    
    </summary>
    
      <category term="核心java" scheme="http://blog.greekw.com/categories/%E6%A0%B8%E5%BF%83java/"/>
    
    
      <category term="java" scheme="http://blog.greekw.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Android之Fragment分析</title>
    <link href="http://blog.greekw.com/2015/11/11/Android%E4%B9%8BFragment%E5%88%86%E6%9E%90/"/>
    <id>http://blog.greekw.com/2015/11/11/Android之Fragment分析/</id>
    <published>2015-11-11T15:53:00.000Z</published>
    <updated>2017-03-11T11:36:05.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Fragment是非常实用的组件，是Android3.0引入的新API,Fragment代表了Activity的子模块，可以将其理解为Activity的片段。<br>Fragment也拥有自己的生命周期，但它的生命周期会受到它所在Activity的生命周期的控制。<br><a id="more"></a></p>
<h2 id="一、Fragment概述"><a href="#一、Fragment概述" class="headerlink" title="一、Fragment概述"></a>一、Fragment概述</h2></blockquote>
<p>Fragment是非常实用的组件，是Android3.0引入的新API,Fragment代表了Activity的子模块，可以将其理解为Activity的片段。<br>Fragment也拥有自己的生命周期，但它的生命周期会受到它所在Activity的生命周期的控制。例如,当Activity暂停时，该Activity内所有的Fragment都会暂停；当Activity被销毁时，该Activity内所有的Fragment都会被销毁。Android3.0引入Fragment的目的是为了适应大屏幕的平板电脑。Fragment简化了大屏幕UI的设计，不需要开发者管理组件复杂的包含关系。</p>
<h2 id="二、Fragment的作用"><a href="#二、Fragment的作用" class="headerlink" title="二、Fragment的作用"></a>二、Fragment的作用</h2><p>开发者使用Fragment对UI组件进行分组，模块化管理，可以更方便的在运行过程中更新Activity的用户界面。</p>
<h2 id="三、Fragment的特征"><a href="#三、Fragment的特征" class="headerlink" title="三、Fragment的特征"></a>三、Fragment的特征</h2><p>1.Fragment总是作为Activty的界面组成部分，可以调用getActivity()获取它所在的Activity.而Activity则可调用FragmentManager中方法来获取Fragment。<br>2.一个Activity可以包含多个Fragment,反之，一个Fragment也可被多个Activity复用。</p>
<h2 id="四、Fragment的创建"><a href="#四、Fragment的创建" class="headerlink" title="四、Fragment的创建"></a>四、Fragment的创建</h2><p>与创建Activity类似，创建的Fragment必须继承Fragment基类，android提供了如下图的继承体系:<br><img src="http://img.blog.csdn.net/20151111233854343" alt="这里写图片描述"></p>
<p>此外，创建Fragment通常需要实现如下几个方法:<br>    1.onCreate():系统创建Fragment时调用此方法，在方法中初始化在Fragment中的必要组件。<br>    2.onCreateView()当Fragment绘制界面组件会回调此方法，此方法返回一个View对象，也就是Fragment所显示的View<br>    3.onPause() 当用户离开Fragment时调用此方法<br>下面介绍一个Fragment显示加载一份简单的界面布局文件，并根据传入的参数更新界面组件的程序实现。<br>代码如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BookDetailFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span></div><div class="line">&#123;</div><div class="line">	public static <span class="keyword">final</span> <span class="type">String</span> <span class="type">ITEM_ID</span> = <span class="string">"item_id"</span>;</div><div class="line">	<span class="comment">// 保存该Fragment显示的Book对象</span></div><div class="line">	<span class="type">BookContent</span>.<span class="type">Book</span> book;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public void onCreate(<span class="type">Bundle</span> savedInstanceState)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		<span class="comment">// 如果启动该Fragment时包含了ITEM_ID参数</span></div><div class="line">		<span class="keyword">if</span> (getArguments().containsKey(<span class="type">ITEM_ID</span>))</div><div class="line">		&#123;</div><div class="line">			book = <span class="type">BookContent</span>.<span class="type">ITEM_MAP</span>.get(getArguments()</div><div class="line">				.getInt(<span class="type">ITEM_ID</span>)); <span class="comment">//①</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 重写该方法，该方法返回的View将作为Fragment显示的组件</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater</div><div class="line">		, <span class="type">ViewGroup</span> container, <span class="type">Bundle</span> savedInstanceState)</div><div class="line">	&#123;</div><div class="line">		<span class="comment">// 加载/res/layout/目录下的fragment_book_detail.xml布局文件</span></div><div class="line">		<span class="type">View</span> rootView = inflater.inflate(<span class="type">R</span>.layout.fragment_book_detail,</div><div class="line">				container, <span class="literal">false</span>);</div><div class="line">		<span class="keyword">if</span> (book != <span class="literal">null</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="comment">// 让book_title文本框显示book对象的title属性</span></div><div class="line">			((<span class="type">TextView</span>) rootView.findViewById(<span class="type">R</span>.id.book_title))</div><div class="line">					.setText(book.title);</div><div class="line">			<span class="comment">// 让book_desc文本框显示book对象的desc属性</span></div><div class="line">			((<span class="type">TextView</span>) rootView.findViewById(<span class="type">R</span>.id.book_desc))</div><div class="line">				.setText(book.desc);	</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> rootView;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述Fragment用来显示一个简单的布局文件，界面内容由布局文件定义。</p>
<h2 id="五、Fragment与Activity的交互"><a href="#五、Fragment与Activity的交互" class="headerlink" title="五、Fragment与Activity的交互"></a>五、Fragment与Activity的交互</h2><p>创建完Fragment后，为了让它在Activity中显示，则必须将Fragment加载到Activity中，将Fragment加载到Activity中有如下几种方式：<br>(1).在布局文件中添加Fragment ,元素的android:name属性指定为Fragment的实现类。<br>(2).在类中通过FragmentTransaction对象的add()方法添加Fragment。如getFragmentManager()可返回FragmentManager,而FragmentManager对象的beginTransaction()可开启并返回FragmentTransaction对象。<br>实例如下:<br>1.Activity会通过布局文件使用定义好的BookDetailFragment ，此Activity的左边显示一个ListFragment,右边会显示一个Fragment容器，该容器会动态更新Fragment显示的内容。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="comment">&lt;!-- 定义一个水平排列的LinearLayout，并指定使用中等分隔条 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">	<span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">	<span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">	<span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">	<span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">	<span class="attr">android:layout_marginLeft</span>=<span class="string">"16dp"</span></div><div class="line">	<span class="attr">android:layout_marginRight</span>=<span class="string">"16dp"</span></div><div class="line">	<span class="attr">android:divider</span>=<span class="string">"?android:attr/dividerHorizontal"</span></div><div class="line">	<span class="attr">android:showDividers</span>=<span class="string">"middle"</span>&gt;</div><div class="line">	<span class="comment">&lt;!-- 添加一个Fragment --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">fragment</span></span></div><div class="line">		<span class="attr">android:name</span>=<span class="string">"org.crazyit.app.BookListFragment"</span></div><div class="line">		<span class="attr">android:id</span>=<span class="string">"@+id/book_list"</span></div><div class="line">		<span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">		<span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">		<span class="attr">android:layout_weight</span>=<span class="string">"1"</span> /&gt;</div><div class="line">	<span class="comment">&lt;!-- 添加一个FrameLayout容器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">		<span class="attr">android:id</span>=<span class="string">"@+id/book_detail_container"</span></div><div class="line">		<span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">		<span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">		<span class="attr">android:layout_weight</span>=<span class="string">"3"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2.Activity代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectBookActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span></span></div><div class="line">		<span class="title">BookListFragment</span>.<span class="title">Callbacks</span></div><div class="line">&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		<span class="comment">// 加载/res/layout目录下的activity_book_twopane.xml布局文件</span></div><div class="line">		setContentView(R.layout.activity_book_twopane);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 实现Callbacks接口必须实现的方法</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(Integer id)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// 创建Bundle，准备向Fragment传入参数</span></div><div class="line">		Bundle arguments = <span class="keyword">new</span> Bundle();</div><div class="line">		arguments.putInt(BookDetailFragment.ITEM_ID, id);</div><div class="line">		<span class="comment">// 创建BookDetailFragment对象</span></div><div class="line">		BookDetailFragment fragment = <span class="keyword">new</span> BookDetailFragment();</div><div class="line">		<span class="comment">// 向Fragment传入参数</span></div><div class="line">		fragment.setArguments(arguments);</div><div class="line">		<span class="comment">// 使用fragment替换book_detail_container容器当前显示的Fragment</span></div><div class="line">		getFragmentManager().beginTransaction()</div><div class="line">			.replace(R.id.book_detail_container, fragment)</div><div class="line">			.commit();  <span class="comment">//①</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由此可见，将Fragment添加到Activity后，Fragment必须与Activiity交互信息，则可按如下方法进行<br>1.调用Fragment下的getActivity()获取它所在的Activity。<br>2.调用Activity关联的FragmentManager的findFragmentById(int id)获取指定的Fragment。<br>此外,Fragment还可以与Activity进行数据传递，比如:<br>1.Fragment向Activity传递数据:则在Fragment中定义一个内部回调接口。<br>2.Activity向Fragment传递数据:则在Activity中创建数据包Bundle 后调用Fragment的setArguments(Bundle bundle)方法可将Bundle中的数据传给Fragment。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Fragment是非常实用的组件，是Android3.0引入的新API,Fragment代表了Activity的子模块，可以将其理解为Activity的片段。&lt;br&gt;Fragment也拥有自己的生命周期，但它的生命周期会受到它所在Activity的生命周期的控制。&lt;br&gt;
    
    </summary>
    
      <category term="android开发" scheme="http://blog.greekw.com/categories/android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="android" scheme="http://blog.greekw.com/tags/android/"/>
    
      <category term="Fragment" scheme="http://blog.greekw.com/tags/Fragment/"/>
    
  </entry>
  
  <entry>
    <title>Android之事件处理</title>
    <link href="http://blog.greekw.com/2015/11/09/android%E4%B9%8B%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://blog.greekw.com/2015/11/09/android之事件处理/</id>
    <published>2015-11-09T15:49:00.000Z</published>
    <updated>2017-03-11T11:36:05.401Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>事件处理是一种在应用程序上为用户动作提供响应的机制，android提供了强大的事件处理机制，包括两套事件处理机制。<br><a id="more"></a><br><strong>一、android事件处理概述</strong><br>      事件处理是一种在应用程序上为用户动作提供响应的机制，android提供了强大的事件处理机制，包括两套事件处理机制:<br>    A.基于监听的事件处理:主要实现为Android的界面组件提供特定的事件监听器<br>    B.基于回调的事件处理:主要实现为重写Android组件绑定的回调方法或重写Activity的回调方法<br>    一般而言，基于回调的事件处理会常用于处理一些通用性的事件<br><strong>二、android的事件处理机制</strong><br>    <strong>1.基于监听事件的处理</strong><br>    1.1监听的处理模型<br>        在事件监听的处理模型中，主要有如下三类对象:<br>        事件源(EventSource):通常是各个组件，例如按钮，菜单等。<br>        事件(Event):封装在界面上操作的的特定动作。<br>        事件监听器(EventListener):赋值监听事件所发生的事情，并对各种事件作出响应。<br>    Anroid的事件处理机制是一种委派式事件处理方式:普通组件将整个事件处理委托给事件监听器，当事件源发生指定的事件时，就通知所委托的事件监听器，并由它处理此事件。<br>    事件监听器与事件是一对多的关系，一个监听器可以监听一个或多个事件源，委派式的处理方式可以把事件源上所有可能发生的事件分别授权给不同的事件监听器来处理，同时也可以让同一类事件都使用一个相同的事件监听器。<br>事件处理的示意图如下:</p>
</blockquote>
<p><strong>1.1.1程序实例</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventQs</span> <span class="keyword">extends</span> <span class="title">Activity</span></span></div><div class="line">&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.main);</div><div class="line">		<span class="comment">// 获取应用程序中的bn按钮</span></div><div class="line">		Button bn = (Button) findViewById(R.id.bn);</div><div class="line">		<span class="comment">// 为按钮绑定事件监听器。</span></div><div class="line">		bn.setOnClickListener(<span class="keyword">new</span> MyClickListener()); <span class="comment">// ①</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 定义一个单击事件的监听器</span></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">MyClickListener</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">// 实现监听器类必须实现的方法，该方法将会作为事件处理器</span></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span></div><div class="line">		&#123;</div><div class="line">			EditText txt = (EditText) findViewById(R.id.txt);</div><div class="line">			txt.setText(<span class="string">"bn按钮被单击了！"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的程序中可看出，基于监听的事件处理模型编程步骤有:<br>A.获取普通界面组件(事件源)<br>B.实现事件监听器类，需要实现XxxListener接口<br>C.调用事件源的setXxxListener方法将事件监听器注册给事件源</p>
<p><strong>1.2 事件和事件监听器</strong><br>    事件监听的处理模型涉及到三个元素:事件，事件监听器，事件源等，其中事件源是最容易创建，任何界面组件都可以作为事件源；事件的产生也是由系统自动产生，无须程序员关系.<br>    所以事件监听器是整个事件处理的核心。<br>    在基于事件监听的处理模型中，事件监听器必须实现事件监听器接口，Android为不同的界面组件提供了不同的事件监听器接口，这些接口通常以内部类的方式存在。<br>    以View来说明,包含如下几个内部接口<br>    view.onClickListener():单击的事件需要实现的接口。<br>    view.onCreateContextMenuListener():创建上下文菜单的事件需要实现的接口。<br>    view.onFousChangeListener()焦点改变的事件监听器需要实现的接口。<br>    view.onKeyListener():按键事件的事件监听器需要实现的接口。<br>    view.onLongClickListener():长按单击的事件监听器需要实现的接口。<br>    view.onTouchListener():触摸屏事件监听器需要实现的接口。</p>
<p>总之事件监听器，其实就是实现了特定接口的java类，在程序中通常有以下几种实现方式:<br>    1.内部类形式:将事件监听器类定义为当前内部类。<br>    2.外部类形式:将事件监听器类定义为一个外部类。<br>    3.Activity本身作为事件监听器类:Activity实现监听器接口，并实现事件处理方法。<br>    4.匿名内部类形式。<br>    以下为各种形式的代码实现:<br>    A.外部类的实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendSmsListener</span> <span class="keyword">implements</span> <span class="title">OnLongClickListener</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> Activity act;</div><div class="line">	<span class="keyword">private</span> EditText address;</div><div class="line">	<span class="keyword">private</span> EditText content;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SendSmsListener</span><span class="params">(Activity act, EditText address</span></span></div><div class="line">		, EditText content)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.act = act;</div><div class="line">		<span class="keyword">this</span>.address = address;</div><div class="line">		<span class="keyword">this</span>.content = content;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View source)</span></span></div><div class="line">	&#123;</div><div class="line">		String addressStr = address.getText().toString();</div><div class="line">		String contentStr = content.getText().toString();</div><div class="line">		<span class="comment">// 获取短信管理器</span></div><div class="line">		SmsManager smsManager = SmsManager.getDefault();</div><div class="line">		<span class="comment">// 创建发送短信的PendingIntent</span></div><div class="line">		PendingIntent sentIntent = PendingIntent.getBroadcast(act</div><div class="line">			, <span class="number">0</span>, <span class="keyword">new</span> Intent(), <span class="number">0</span>);</div><div class="line">		<span class="comment">// 发送文本短信</span></div><div class="line">		smsManager.sendTextMessage(addressStr, <span class="keyword">null</span>, contentStr</div><div class="line">			, sentIntent, <span class="keyword">null</span>);</div><div class="line">		Toast.makeText(act, <span class="string">"短信发送完成"</span>, Toast.LENGTH_LONG).show();</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建此监听器需要传入Activity 和EditText两个参数<br>B.Activity本身作为事件监听器类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实现事件监听器接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityListener</span> <span class="keyword">extends</span> <span class="title">Activity</span></span></div><div class="line">	<span class="keyword">implements</span> <span class="title">OnClickListener</span></div><div class="line">&#123;</div><div class="line">	EditText show;</div><div class="line">	Button bn;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.main);</div><div class="line">		show = (EditText) findViewById(R.id.show);</div><div class="line">		bn = (Button) findViewById(R.id.bn);</div><div class="line">		<span class="comment">// 直接使用Activity作为事件监听器</span></div><div class="line">		bn.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 实现事件处理方法</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span></div><div class="line">	&#123;</div><div class="line">		show.setText(<span class="string">"bn按钮被单击了！"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此形式十分简洁，直接实现OnClickListener监听器接口，但有如下缺点:<br>程序结构混乱，Activity主要职责是完成界面的初始化工作，若包含处理监听器的实现，则会产生混乱<br>C.匿名内部类形式</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AnonymousListener</span> <span class="keyword">extends</span> <span class="title">Activity</span></span></div><div class="line">&#123;</div><div class="line">	<span class="type">EditText</span> show;</div><div class="line">	<span class="type">Button</span> bn;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public void onCreate(<span class="type">Bundle</span> savedInstanceState)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(<span class="type">R</span>.layout.main);</div><div class="line">		show = (<span class="type">EditText</span>) findViewById(<span class="type">R</span>.id.show);</div><div class="line">		bn = (<span class="type">Button</span>) findViewById(<span class="type">R</span>.id.bn);</div><div class="line">		<span class="comment">// 直接使用Activity作为事件监听器</span></div><div class="line">		bn.setOnClickListener(<span class="keyword">new</span> <span class="type">OnClickListener</span>()</div><div class="line">		&#123;</div><div class="line">			<span class="comment">// 实现事件处理方法</span></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			public void onClick(<span class="type">View</span> v)</div><div class="line">			&#123;</div><div class="line">				show.setText(<span class="string">"bn按钮被单击了！"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此形式是使用比较广泛的方法，只需要new 监听器或new 适配器 方式就可以实现。<br>D.直接绑定到元素的标签</p>
<p><strong>2.基于回调的事件处理</strong><br>    Android除了基于事件监听处理模型外，还有基于回调的事件处理模型 (详情请期待更新)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;事件处理是一种在应用程序上为用户动作提供响应的机制，android提供了强大的事件处理机制，包括两套事件处理机制。&lt;br&gt;
    
    </summary>
    
      <category term="android开发" scheme="http://blog.greekw.com/categories/android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="android" scheme="http://blog.greekw.com/tags/android/"/>
    
      <category term="事件处理" scheme="http://blog.greekw.com/tags/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>jquery实现页面无限滚动插件</title>
    <link href="http://blog.greekw.com/2015/11/07/jquery%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E6%97%A0%E9%99%90%E6%BB%9A%E5%8A%A8%E6%8F%92%E4%BB%B6/"/>
    <id>http://blog.greekw.com/2015/11/07/jquery实现页面无限滚动插件/</id>
    <published>2015-11-07T11:28:00.000Z</published>
    <updated>2017-03-11T11:36:05.401Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>实现网页底部自动加载内容的插件很多，如jQuery ScrollPagination，jQuery Screw,Autobrowse;下面主要介绍Autobrowse的使用。<br><a id="more"></a></p>
<h2 id="一、插件概述"><a href="#一、插件概述" class="headerlink" title="一、插件概述"></a>一、插件概述</h2></blockquote>
<p>实现网页底部自动加载内容的插件很多，如，<br>1、jQuery ScrollPagination<br>jQuery ScrollPagination plugin 是一个jQuery 实现的支持无限滚动加载数据的插件。<br>地址：<a href="http://andersonferminiano.com/jqueryscrollpagination/" target="_blank" rel="external">http://andersonferminiano.com/jqueryscrollpagination/</a><br>他的demo下载：<a href="http://andersonferminiano.com/jqueryscrollpagination/jqueryscrollpagination.zip" target="_blank" rel="external">http://andersonferminiano.com/jqueryscrollpagination/jqueryscrollpagination.zip</a><br>2.jQuery Screw<br>Screw (scroll + view) 是一个 jQuery 插件当用户滚动页面的时候加载内容，是一个无限滚动翻页的插件。<br>官方地址：<a href="https://github.com/jasonlau/jQuery-Screw" target="_blank" rel="external">https://github.com/jasonlau/jQuery-Screw</a><br>Autobrowse jQuery Plugin 插件在用户滚动页面的时候自动通过 Ajax 加载更多内容，使用浏览器内置缓存。</p>
<ol>
<li>AutoBrowse jQuery Plugin<br>Autobrowse jQuery Plugin 插件在用户滚动页面的时候自动通过 Ajax 加载更多内容，使用浏览器内置缓存。<br>官方地址：<a href="https://github.com/msjolund/jquery-esn-autobrowse" target="_blank" rel="external">https://github.com/msjolund/jquery-esn-autobrowse</a></li>
</ol>
<h2 id="二、插件使用说明"><a href="#二、插件使用说明" class="headerlink" title="二、插件使用说明"></a>二、插件使用说明</h2><p>下面介绍一下Autobrowse的使用：<br>1.引入js依赖文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../plugin/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../plugin/jquery.esn.autobrowse.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2.定义HTML元素<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"full-dom"</span>&gt;</div><div class="line">	&lt;ul <span class="built_in">class</span>=<span class="string">"list-y2"</span> <span class="built_in">id</span>=<span class="string">"activityList"</span>&gt;</div><div class="line">	&lt;/ul&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<p>3.js定义</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#activityList"</span>).autobrowse(&#123;</div><div class="line">		<span class="attr">url</span>:<span class="function"><span class="keyword">function</span> (<span class="params">offset</span>) </span>&#123;</div><div class="line">			<span class="comment">//请求服务器端地址</span></div><div class="line">		&#125;, <span class="attr">template</span>:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">			<span class="comment">//异步组装服务器端返回的数据</span></div><div class="line">		&#125;,</div><div class="line">		 <span class="attr">itemsReturned</span>:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">			<span class="comment">//返回服务端数据的长度</span></div><div class="line">		&#125;, </div><div class="line">		<span class="attr">offset</span>:<span class="number">1</span>,</div><div class="line">		<span class="attr">max</span>:<span class="number">10000</span>, </div><div class="line">		<span class="attr">loader</span>:<span class="string">''</span> <span class="comment">//加载的图标,</span></div><div class="line">		useCache:<span class="literal">false</span>, <span class="comment">//使用缓存</span></div><div class="line">		expiration:<span class="number">1</span>,<span class="comment">//过期时间</span></div><div class="line">		sensitivity: <span class="number">2000</span> <span class="comment">//触发下一页的差值</span></div><div class="line">		finished: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; $(<span class="keyword">this</span>).append(<span class="string">'&lt;p style="text-align:center"&gt;加载完成，没   有更多活动了&lt;/p&gt;'</span>) &#125;<span class="comment">//没有数据时的提示</span></div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<p> 从上可看出，autobrowse可以自定义参数，来触发页面底部自动加载数据的时间和内容，能带来好的用户体验。</p>
<h2 id="三、依赖文件下载"><a href="#三、依赖文件下载" class="headerlink" title="三、依赖文件下载"></a>三、依赖文件下载</h2><p><a href="http://download.csdn.net/detail/xhwwc110/9244831" target="_blank" rel="external">http://download.csdn.net/detail/xhwwc110/9244831</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;实现网页底部自动加载内容的插件很多，如jQuery ScrollPagination，jQuery Screw,Autobrowse;下面主要介绍Autobrowse的使用。&lt;br&gt;
    
    </summary>
    
      <category term="前端插件" scheme="http://blog.greekw.com/categories/%E5%89%8D%E7%AB%AF%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="无限滚动插件" scheme="http://blog.greekw.com/tags/%E6%97%A0%E9%99%90%E6%BB%9A%E5%8A%A8%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Autobrowse" scheme="http://blog.greekw.com/tags/Autobrowse/"/>
    
  </entry>
  
  <entry>
    <title>Jcrop图像裁剪</title>
    <link href="http://blog.greekw.com/2015/11/06/Jcrop%E5%9B%BE%E5%83%8F%E8%A3%81%E5%89%AA/"/>
    <id>http://blog.greekw.com/2015/11/06/Jcrop图像裁剪/</id>
    <published>2015-11-06T11:28:00.000Z</published>
    <updated>2017-03-11T11:36:05.401Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Jquey Jcrop是一款功能强大的图像裁剪插件，结合服务端的处理可实现图片裁剪，改变等功能。<br><a id="more"></a></p>
<h2 id="一、Jcrop简介"><a href="#一、Jcrop简介" class="headerlink" title="一、Jcrop简介"></a>一、Jcrop简介</h2></blockquote>
<pre><code>Jquey Jcrop是一款功能强大的图像裁剪插件，结合服务端的处理可实现图片裁剪，改变等功能。
具有如下特点:
显示图像或块对象
支持图片的最大，最小值的设置
有交互性的API，包含动画
提供CSS样式的定义
支持IOS,android等平台
</code></pre><h2 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h2><pre><code>1.载入 CSS 文件
</code></pre><figure class="highlight flix"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link <span class="keyword">type</span>=<span class="string">"text/css"</span> <span class="keyword">rel</span>=<span class="string">"stylesheet"</span> href=<span class="string">"../css/jquery.Jcrop.css"</span> /&gt;</div></pre></td></tr></table></figure>
<p>2.载入 JavaScript 文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery.Jcrop.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3.给 IMG 标签加上 ID<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"Preview-pic"</span> <span class="built_in">id</span>=<span class="string">"previewIcon"</span>&gt;</div><div class="line">   &lt;img <span class="built_in">id</span>=<span class="string">"imgCrop"</span> <span class="built_in">class</span>=<span class="string">"imgCrop"</span> <span class="built_in">name</span>=<span class="string">"imgCrop"</span> </div><div class="line">	width=<span class="string">"300"</span> height=<span class="string">"300"</span> border=<span class="string">"0"</span> src=<span class="string">""</span>/&gt;	</div><div class="line">  &lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<p>4.调用 Jcrop<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jcrop_api=<span class="symbol">$</span>.Jcrop(<span class="string">'#imgCrop'</span>,&#123;</div><div class="line">		aspectRatio: <span class="number">1</span>,</div><div class="line">		onChange: showCoords, <span class="comment">// 选框改变时的事件</span></div><div class="line">		onSelect: showCoords <span class="comment">// 选框选定时的事件</span></div><div class="line">	&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="三、使用实例"><a href="#三、使用实例" class="headerlink" title="三、使用实例"></a>三、使用实例</h2><p>   1.下载Jcop的依赖文件，下载地址如下:<br> <a href="http://deepliquid.com/content/Jcrop.html,将css和js文件引入项目中" target="_blank" rel="external">http://deepliquid.com/content/Jcrop.html,将css和js文件引入项目中</a>    。</p>
<p> 2.页面定义<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;header <span class="built_in">class</span>=<span class="string">"head-revision-top clearfix"</span>&gt;</div><div class="line"> &lt;h4 <span class="built_in">class</span>=<span class="string">"fl"</span> <span class="built_in">id</span>=<span class="string">"sysField"</span>&gt;</div><div class="line">	&lt;a href=<span class="string">""</span>&gt;系统头像&lt;/a&gt;</div><div class="line">  &lt;/h4&gt;</div><div class="line">  &lt;p <span class="built_in">class</span>=<span class="string">"fr head-revision-file"</span>&gt;</div><div class="line">  &lt;input <span class="built_in">class</span>=<span class="string">"head-revision-input"</span> type=<span class="string">"file"</span> </div><div class="line">		accept=<span class="string">"image/*"</span> <span class="built_in">name</span>=<span class="string">"uploadFile"</span> <span class="built_in">id</span>=<span class="string">"uploadFile"</span>      onchange=<span class="string">"checkImgType(this);"</span> /&gt;</div><div class="line"> &lt;/p&gt;</div><div class="line">&lt;/header&gt;</div><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"head-revision mt20 clearfix"</span> <span class="built_in">id</span>=<span class="string">"uploadIcon"</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"Preview-pic"</span> <span class="built_in">id</span>=<span class="string">"previewIcon"</span>&gt;</div><div class="line">	&lt;img <span class="built_in">id</span>=<span class="string">"imgCrop"</span> <span class="built_in">class</span>=<span class="string">"imgCrop"</span> <span class="built_in">name</span>=<span class="string">"imgCrop"</span> </div><div class="line">		width=<span class="string">"300"</span> height=<span class="string">"300"</span> border=<span class="string">"0"</span> src=<span class="string">""</span>/&gt;	</div><div class="line">  </div><div class="line">  &lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<p>3.js实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> firstFlag = <span class="literal">false</span>,count=<span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> jcrop_api, boundx, boundy;</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$(<span class="string">'#userIconBtn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> x = $(<span class="string">"#x"</span>).val();</div><div class="line">		<span class="keyword">var</span> y = $(<span class="string">"#y"</span>).val();</div><div class="line">		<span class="keyword">var</span> w = $(<span class="string">"#w"</span>).val();</div><div class="line">		<span class="keyword">var</span> h = $(<span class="string">"#h"</span>).val();</div><div class="line">		<span class="keyword">if</span> (w == <span class="number">0</span> || h == <span class="number">0</span>) &#123;</div><div class="line">			alert(<span class="string">"您还没有选择图片的剪切区域,不能进行剪切图片!"</span>);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			$.ajax(&#123;</div><div class="line">				<span class="attr">url</span>: <span class="string">''</span>,</div><div class="line">				<span class="attr">data</span>: $(<span class="string">'#uploadIconForm'</span>).serialize(),</div><div class="line">				<span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">				<span class="attr">beforeSend</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">				&#123;  </div><div class="line">				&#125;,</div><div class="line">				<span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">				&#123;</div><div class="line">					<span class="comment">// 提交成功，刷新页面</span></div><div class="line">		        	<span class="comment">//location.reload(true);</span></div><div class="line">					<span class="built_in">window</span>.location.href=<span class="string">""</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/**检查图片上传类型*/</span>          </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">checkImgType</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line"> <span class="comment">//更换头像销毁原有的jcrop	</span></div><div class="line"> <span class="keyword">if</span>(count&gt;=<span class="number">1</span>)&#123;</div><div class="line"> 	firstFlag=<span class="literal">false</span>;</div><div class="line"> 	jcrop_api.destroy();</div><div class="line"> &#125;</div><div class="line">  <span class="keyword">var</span> uploadFile = <span class="string">''</span>;    </div><div class="line">  <span class="comment">//获取图片的全路径   </span></div><div class="line">  <span class="keyword">var</span> imgFilePath = getImgFullPath(obj);        </div><div class="line">  <span class="keyword">var</span> endIndex = imgFilePath.lastIndexOf(<span class="string">"\\"</span>);   </div><div class="line">  <span class="keyword">var</span> lastIndex = imgFilePath.length-endIndex<span class="number">-1</span>;   </div><div class="line">  <span class="keyword">if</span> (endIndex != <span class="number">-1</span>)   </div><div class="line">     uploadFile= imgFilePath.substr(endIndex+<span class="number">1</span>,lastIndex);   </div><div class="line">  <span class="keyword">else</span>  </div><div class="line">     uploadFile = imgFilePath;        </div><div class="line">       </div><div class="line">  <span class="keyword">var</span> tag = <span class="literal">true</span>;               </div><div class="line">  endIndex = imgFilePath.lastIndexOf(<span class="string">"."</span>);              </div><div class="line">  <span class="keyword">if</span> (endIndex == <span class="number">-1</span>)    </div><div class="line">    tag = <span class="literal">false</span>;   </div><div class="line">       </div><div class="line">  <span class="keyword">var</span> ImgName = imgFilePath.substr(endIndex+<span class="number">1</span>,lastIndex);   </div><div class="line">  ImgName = ImgName.toUpperCase();           </div><div class="line">    </div><div class="line">  <span class="keyword">if</span> (ImgName !=<span class="string">"GIF"</span> &amp;&amp; ImgName !=<span class="string">"JPG"</span> &amp;&amp; ImgName !=<span class="string">"PNG"</span> &amp;&amp; ImgName !=<span class="string">"BMP"</span>)&#123;    </div><div class="line">      tag=<span class="literal">false</span>;   </div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (!tag) &#123;   </div><div class="line">      alert(<span class="string">"上传图片的文件类型必须为: *.gif,*.jpg,*.png,*.bmp,请重新选择!"</span>)   </div><div class="line">      Upload.clear(obj);                        </div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;   </div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">  		count++;</div><div class="line">		$.ajaxFileUpload(&#123;  </div><div class="line">                <span class="attr">url</span>: <span class="string">"user!uploadFile"</span>,            <span class="comment">//需要链接到服务器地址  </span></div><div class="line">                secureuri:<span class="literal">false</span>,  </div><div class="line">                <span class="attr">fileElementId</span>:<span class="string">"uploadFile"</span>,                  <span class="comment">//文件选择框的id属性  </span></div><div class="line">                dataType: <span class="string">"json"</span>,                            <span class="comment">//服务器返回的格式，可以是json  </span></div><div class="line">                success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">					<span class="keyword">if</span>(data.resultCode=<span class="number">1</span>)&#123;</div><div class="line">						$(<span class="string">"#imgCrop"</span>).attr(<span class="string">"src"</span>,data.resultInfo);</div><div class="line">						$(<span class="string">"#imgCrop"</span>).attr(<span class="string">"width"</span>,data.width);</div><div class="line">						$(<span class="string">"#imgCrop"</span>).attr(<span class="string">"height"</span>,data.height);</div><div class="line">						$(<span class="string">"#width"</span>).val(data.width);</div><div class="line">						$(<span class="string">"#height"</span>).val(data.height);</div><div class="line">						$(<span class="string">"#imgFileExt"</span>).val(data.imgFileExt);</div><div class="line">						$(<span class="string">"#oldImgPath"</span>).val(data.oldImgPath);</div><div class="line">						jcrop_api=$.Jcrop(<span class="string">'#imgCrop'</span>,&#123;</div><div class="line">							<span class="attr">aspectRatio</span>: <span class="number">1</span>,</div><div class="line">							<span class="attr">onChange</span>: showCoords, <span class="comment">// 选框改变时的事件</span></div><div class="line">							onSelect: showCoords <span class="comment">// 选框选定时的事件</span></div><div class="line">						&#125;);</div><div class="line">					&#125;<span class="keyword">else</span>&#123;</div><div class="line">						alert(<span class="string">"系统连接有误,请重新上传或连接管理员"</span>);</div><div class="line">					&#125;</div><div class="line">					jcrop_api.enable();</div><div class="line">					jcrop_api.setImage(data.resultInfo);</div><div class="line">					jcrop_api.animateTo([<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>]);</div><div class="line">					jcrop_api.setOptions(&#123;</div><div class="line">								 <span class="attr">allowResize</span>:<span class="literal">true</span>,</div><div class="line">								 <span class="attr">allowSelect</span>: <span class="literal">false</span>,</div><div class="line">								 <span class="attr">allowMove</span>:<span class="literal">true</span></div><div class="line">								 &#125;);</div><div class="line">					<span class="comment">//获取图片的实际尺寸			 </span></div><div class="line">					<span class="keyword">var</span> bounds=jcrop_api.getBounds();</div><div class="line">					boundx=bounds[<span class="number">0</span>];</div><div class="line">					boundy=bounds[<span class="number">1</span>];</div><div class="line">				&#125; </div><div class="line">            &#125;);  </div><div class="line">  		&#125;</div><div class="line">&#125;     </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getImgFullPath</span>(<span class="params">obj</span>) </span>&#123;   </div><div class="line">    <span class="keyword">if</span> (obj) &#123;     </div><div class="line">       <span class="comment">//ie     </span></div><div class="line">       <span class="keyword">if</span> (<span class="built_in">window</span>.navigator.userAgent.indexOf(<span class="string">"MSIE"</span>) &gt;= <span class="number">1</span>) &#123;     </div><div class="line">           obj.select();     </div><div class="line">           <span class="keyword">return</span> <span class="built_in">document</span>.selection.createRange().text;     </div><div class="line">       &#125;     </div><div class="line">       <span class="comment">//firefox     </span></div><div class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.navigator.userAgent.indexOf(<span class="string">"Firefox"</span>) &gt;= <span class="number">1</span>) &#123;     </div><div class="line">           <span class="keyword">if</span> (obj.files) &#123;     </div><div class="line">               <span class="keyword">return</span> obj.files.item(<span class="number">0</span>).getAsDataURL();     </div><div class="line">           &#125;     </div><div class="line">           <span class="keyword">return</span> obj.value;     </div><div class="line">       &#125;            </div><div class="line">       <span class="keyword">return</span> obj.value;     </div><div class="line">   &#125;     </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCoords</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">	$(<span class="string">'#x'</span>).val(c.x);</div><div class="line">	$(<span class="string">'#y'</span>).val(c.y);</div><div class="line">	$(<span class="string">'#x2'</span>).val(c.x2);</div><div class="line">	$(<span class="string">'#y2'</span>).val(c.y2);</div><div class="line">	$(<span class="string">'#w'</span>).val(c.w);</div><div class="line">	$(<span class="string">'#h'</span>).val(c.h);</div><div class="line">	<span class="keyword">if</span>(!firstFlag)&#123;</div><div class="line">		exchange();</div><div class="line">	&#125;</div><div class="line">	showPreview(c);</div><div class="line"></div><div class="line">&#125;		</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">exchange</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	firstFlag = <span class="literal">true</span>;</div><div class="line">	$(<span class="string">'#preview'</span>).attr(<span class="string">"src"</span>, $(<span class="string">'#imgCrop'</span>).attr(<span class="string">"src"</span>));</div><div class="line">	</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showPreview</span>(<span class="params">coords</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="built_in">parseInt</span>(coords.w) &gt; <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">var</span> rx = <span class="number">200</span> / coords.w;</div><div class="line">		<span class="keyword">var</span> ry = <span class="number">200</span> / coords.h;</div><div class="line">		$(<span class="string">'#preview'</span>).css(&#123;</div><div class="line">			<span class="attr">width</span>:<span class="built_in">Math</span>.round(<span class="number">200</span>/ coords.w * boundx) + <span class="string">'px'</span>,  <span class="comment">//200 为预览div的宽和高</span></div><div class="line">            height:<span class="built_in">Math</span>.round(<span class="number">200</span>/ coords.h * boundy)+ <span class="string">'px'</span>, </div><div class="line">			<span class="attr">marginLeft</span> : <span class="string">'-'</span> + <span class="built_in">Math</span>.round(rx * coords.x) + <span class="string">'px'</span>,</div><div class="line">			<span class="attr">marginTop</span> : <span class="string">'-'</span> + <span class="built_in">Math</span>.round(ry * coords.y) + <span class="string">'px'</span></div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4.服务器处理（java）<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">String</span> uploadFile() &#123;</div><div class="line">	<span class="keyword">int</span> result = Constant.RET_OK;</div><div class="line">	<span class="keyword">String</span> resultUrl = <span class="string">""</span>;</div><div class="line">	<span class="keyword">String</span> imgUploadPath = <span class="string">""</span>;</div><div class="line">	<span class="comment">// 图片初始化高度与宽度</span></div><div class="line">	<span class="keyword">String</span> <span class="built_in">width</span> = null;</div><div class="line">	<span class="keyword">String</span> <span class="built_in">height</span> = null;</div><div class="line">	<span class="keyword">int</span> imgWidth = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> imgHeight = <span class="number">0</span>;</div><div class="line">	SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);</div><div class="line">	<span class="keyword">String</span> userWebAppPath = getWebAppPath();</div><div class="line">	<span class="comment">/** 检查是否有图片上传文件夹 */</span></div><div class="line">	FileUtil.checkImageDir(userWebAppPath);</div><div class="line">	<span class="built_in">try</span> &#123;</div><div class="line">		UserPOJO userSession = (UserPOJO) getSession(Constant.USERLOGINSESSION);</div><div class="line">		<span class="built_in">if</span> (null == userSession) &#123;</div><div class="line">			result = Constant.ISSESSIONERROR;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 指定图片宽度和高度</span></div><div class="line">		<span class="built_in">width</span> = getRequest().getParameter(<span class="string">"width"</span>);</div><div class="line">		<span class="built_in">if</span> (null == <span class="built_in">width</span> || <span class="string">""</span>.equals(<span class="built_in">width</span>)) &#123;</div><div class="line">			<span class="built_in">width</span> = <span class="string">"300"</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">height</span> = getRequest().getParameter(<span class="string">"height"</span>);</div><div class="line">		<span class="built_in">if</span> (null == <span class="built_in">height</span> || <span class="string">""</span>.equals(<span class="built_in">height</span>)) &#123;</div><div class="line">			<span class="built_in">height</span> = <span class="string">"300"</span>;</div><div class="line">		&#125;</div><div class="line">		imgWidth = Integer.<span class="built_in">parseInt</span>(<span class="built_in">width</span>);</div><div class="line">		imgHeight = Integer.<span class="built_in">parseInt</span>(<span class="built_in">height</span>);</div><div class="line">		List&lt;<span class="built_in">File</span>&gt; files = getUploadFile();</div><div class="line">		<span class="built_in">if</span> (files != null &amp;&amp; files.<span class="built_in">size</span>() &gt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.<span class="built_in">size</span>(); i++) &#123;</div><div class="line">				<span class="built_in">File</span> userFile = files.<span class="built_in">get</span>(i);</div><div class="line">				<span class="built_in">try</span> &#123;</div><div class="line">					<span class="keyword">String</span> filePath = FileUtil.saveLocalImg(userFile, userWebAppPath + <span class="string">"\\"</span></div><div class="line">							+ getUploadFileFileName().<span class="built_in">get</span>(<span class="number">0</span>));</div><div class="line">					BufferedImage src = ImageIO.<span class="built_in">read</span>(<span class="keyword">new</span> <span class="built_in">File</span>(filePath)); <span class="comment">// 读入文件</span></div><div class="line">					<span class="keyword">int</span> imgSrcWidth = src.getWidth(); <span class="comment">// 得到源图宽</span></div><div class="line">					<span class="keyword">int</span> imgSrcHeight = src.getHeight(); <span class="comment">// 得到源图长</span></div><div class="line">					<span class="comment">// 重新指定大小</span></div><div class="line">					<span class="built_in">if</span> (imgSrcWidth &gt;= imgSrcHeight) &#123;</div><div class="line">						imgWidth = imgSrcWidth &gt; <span class="number">300</span> ? <span class="number">300</span> : imgSrcWidth;</div><div class="line">						imgHeight = (<span class="keyword">int</span>) (imgWidth * (<span class="keyword">float</span>) imgSrcHeight / (<span class="keyword">float</span>) imgSrcWidth);</div><div class="line">						imgHeight = imgHeight &lt; <span class="number">200</span> ? <span class="number">200</span> : imgHeight;</div><div class="line">					&#125; <span class="built_in">else</span> &#123;</div><div class="line">						imgHeight = imgSrcHeight &gt; <span class="number">300</span> ? <span class="number">300</span> : imgSrcHeight;</div><div class="line">						imgWidth = (<span class="keyword">int</span>) (imgHeight * (<span class="keyword">float</span>) imgSrcWidth / (<span class="keyword">float</span>) imgSrcHeight);</div><div class="line">						imgWidth = imgWidth &lt; <span class="number">200</span> ? <span class="number">200</span> : imgWidth;</div><div class="line">					&#125;</div><div class="line">					<span class="comment">// 按照图片的设置大小生成</span></div><div class="line">					ImageCut.scale(src, userFile, imgWidth, imgHeight);</div><div class="line">					log.info(<span class="string">"创建"</span> + imgWidth + <span class="string">"*"</span> + imgHeight + <span class="string">"图片成功"</span>);</div><div class="line">					<span class="comment">// 上传图片到图片服务器并获得访问地址</span></div><div class="line">					FileInputStream fis = <span class="keyword">new</span> FileInputStream(userFile);</div><div class="line">					<span class="keyword">byte</span>[] fileBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[fis.<span class="built_in">available</span>()];</div><div class="line">					fis.<span class="built_in">read</span>(fileBytes);</div><div class="line">					fis.<span class="built_in">close</span>();</div><div class="line">					resultUrl = FileUtil.getImageUrl(FileUtil.getExtName(<span class="keyword">this</span>.getUploadFileFileName().<span class="built_in">get</span>(<span class="number">0</span>)),</div><div class="line">							fileBytes);</div><div class="line">					<span class="comment">// 将远程服务器得到的文件保存到该服务器</span></div><div class="line">					<span class="keyword">String</span> newFileName = df.format(<span class="keyword">new</span> Date()) + <span class="string">"_"</span> + <span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>) + <span class="string">"."</span></div><div class="line">							+ FileUtil.getExtName(<span class="keyword">this</span>.getUploadFileFileName().<span class="built_in">get</span>(<span class="number">0</span>));</div><div class="line">					imgUploadPath = IMGROOT + newFileName;</div><div class="line">					FileUtil.saveImageToLocal(resultUrl, userWebAppPath + newFileName);</div><div class="line">				&#125; <span class="built_in">catch</span> (IOException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="built_in">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">		result = Constant.SYSTEM_ERROR;</div><div class="line">	&#125;</div><div class="line">	Map&lt;Object, Object&gt; infoMap = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</div><div class="line">	infoMap.<span class="built_in">put</span>(Constant.RESULT_CODE_KEY, result);</div><div class="line">	infoMap.<span class="built_in">put</span>(Constant.RESULT_INFO, resultUrl);</div><div class="line">	infoMap.<span class="built_in">put</span>(<span class="string">"width"</span>, imgWidth);</div><div class="line">	infoMap.<span class="built_in">put</span>(<span class="string">"height"</span>, imgHeight);</div><div class="line">	infoMap.<span class="built_in">put</span>(<span class="string">"oldImgPath"</span>, imgUploadPath);</div><div class="line">	infoMap.<span class="built_in">put</span>(<span class="string">"imgFileExt"</span>, FileUtil.getExtName(<span class="keyword">this</span>.getUploadFileFileName().<span class="built_in">get</span>(<span class="number">0</span>)));</div><div class="line">	JSONObject json = JSONObject.fromObject(infoMap);</div><div class="line">	<span class="built_in">writeJSON</span>(json.toString());</div><div class="line">	<span class="built_in">return</span> null;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="四、API接口及参数说明"><a href="#四、API接口及参数说明" class="headerlink" title="四、API接口及参数说明"></a>四、API接口及参数说明</h2><pre><code>http://code.ciaoca.com/jquery/jcrop/    
</code></pre><h2 id="五、实现效果"><a href="#五、实现效果" class="headerlink" title="五、实现效果"></a>五、实现效果</h2><p> <img src="http://img.blog.csdn.net/20151105171544306" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Jquey Jcrop是一款功能强大的图像裁剪插件，结合服务端的处理可实现图片裁剪，改变等功能。&lt;br&gt;
    
    </summary>
    
      <category term="前端插件" scheme="http://blog.greekw.com/categories/%E5%89%8D%E7%AB%AF%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="图像裁剪" scheme="http://blog.greekw.com/tags/%E5%9B%BE%E5%83%8F%E8%A3%81%E5%89%AA/"/>
    
      <category term="Jcrop" scheme="http://blog.greekw.com/tags/Jcrop/"/>
    
  </entry>
  
  <entry>
    <title>swiper图片轮播插件</title>
    <link href="http://blog.greekw.com/2015/11/05/swiper%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD%E6%8F%92%E4%BB%B6/"/>
    <id>http://blog.greekw.com/2015/11/05/swiper图片轮播插件/</id>
    <published>2015-11-05T08:28:00.000Z</published>
    <updated>2017-03-11T11:36:05.401Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>实现图片轮播的幻灯片的效果的插件有很多，如touchsiler,Swiper，silerbox等等，各有独自的API和自定义效果。下面要说的是关于swiper的使用。<br><a id="more"></a></p>
<h2 id="一、swiper简介"><a href="#一、swiper简介" class="headerlink" title="一、swiper简介"></a>一、swiper简介</h2></blockquote>
<pre><code>实现图片轮播的幻灯片的效果的插件有很多，如touchsiler,Swiper，silerbox等等，各有独自的API和自定义效果。下面要说的是关于swiper的使用。
Swiper 是一款免费以及轻量级的移动设备触控滑块的js框架，使用硬件加速过渡（如果该设备支持的话）。主要使用于移动端的网站、移动web apps，native apps和hybrid apps。
主要是为IOS而设计的，同时，在Android、WP8系统也有着良好的用户体验，Swiper从3.0开始不再全面支持PC端。
因此，如需在PC上兼容更多的浏览器，可以选择Swiper2.x（甚至支持IE7）。
中文官网：[http://www.swiper.com.cn/]
</code></pre><h2 id="二、默认参数说明"><a href="#二、默认参数说明" class="headerlink" title="二、默认参数说明"></a>二、默认参数说明</h2><p>如:var swiper = new Swiper(‘.swipe3’, {<br>                spaceBetween: 10,<br>                centeredSlides: false,<br>                slidesPerView : 3,//设置slider容器能够同时显示的slides数量(carousel模式)<br>                initialSlide : 0,//设定初始化时slide的索引。<br>                autoplay: 5000,//播放的间隔时间<br>                loop: true,//是否循环播放<br>                autoplayDisableOnInteraction: false,//用户操作swiper之后，是否禁止autoplay。默认为true：停止<br>            });</p>
<h2 id="三、使用教程"><a href="#三、使用教程" class="headerlink" title="三、使用教程"></a>三、使用教程</h2><p>1.首先加载插件，需要用到的文件有swiper.min.js和swiper.min.css文件。    </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"path/to/swiper.min.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/swiper.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果你的页面加载了jQuery.js或者zepto.js，你可以选择使用更轻便的swiper.jquery.min.js。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"path/to/swiper.min.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/swiper.jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2.HTML内容。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 如果需要分页器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 如果需要导航按钮 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-prev"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-next"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 如果需要滚动条 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-scrollbar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>导航等组件可以放在container之外<br>3.你可能想要给Swiper定义一个大小，当然不要也行。<br>.swiper-container {<br>    width: 600px;<br>    height: 300px;<br>}<br>4.初始化Swiper</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">        </span></div><div class="line">  <span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper (<span class="string">'.swiper-container'</span>, &#123;</div><div class="line">    direction: <span class="string">'vertical'</span>,</div><div class="line">    loop: <span class="literal">true</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 如果需要分页器</span></div><div class="line">    pagination: <span class="string">'.swiper-pagination'</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 如果需要前进后退按钮</span></div><div class="line">    nextButton: <span class="string">'.swiper-button-next'</span>,</div><div class="line">    prevButton: <span class="string">'.swiper-button-prev'</span>,</div><div class="line">    </div><div class="line">    <span class="comment">// 如果需要滚动条</span></div><div class="line">    scrollbar: <span class="string">'.swiper-scrollbar'</span>,</div><div class="line">  &#125;)        </div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果不能写在HTML内容的后面，则需要在页面加载完成后再初始化。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">或者这样（Jquery和Zepto）</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"> ...</div><div class="line">&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>5.完成。恭喜你，现在你的Swiper应该已经能正常切换了，如果没有，你可以参考下这个测试包。现在开始添加各种选项和参数丰富你的Swiper，开启华丽移动前端创作之旅。</p>
<p>插件下载地址:<br>1.<a href="http://www.swiper.com.cn/download/index.html" target="_blank" rel="external">http://www.swiper.com.cn/download/index.html</a><br>2.<a href="http://download.csdn.net/detail/xhwwc110/9244457" target="_blank" rel="external">http://download.csdn.net/detail/xhwwc110/9244457</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;实现图片轮播的幻灯片的效果的插件有很多，如touchsiler,Swiper，silerbox等等，各有独自的API和自定义效果。下面要说的是关于swiper的使用。&lt;br&gt;
    
    </summary>
    
      <category term="前端插件" scheme="http://blog.greekw.com/categories/%E5%89%8D%E7%AB%AF%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="图片轮播" scheme="http://blog.greekw.com/tags/%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD/"/>
    
      <category term="swiper" scheme="http://blog.greekw.com/tags/swiper/"/>
    
  </entry>
  
  <entry>
    <title>Android之Intent分析</title>
    <link href="http://blog.greekw.com/2015/10/25/Android%E4%B9%8BIntent%E5%88%86%E6%9E%90/"/>
    <id>http://blog.greekw.com/2015/10/25/Android之Intent分析/</id>
    <published>2015-10-25T15:54:00.000Z</published>
    <updated>2017-03-11T11:36:05.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>android的Intent是目的，意图之意，是android提供的一种协助应用程序间交互和通讯的机制。intent不仅可以用于应用程序间，也可以应用于应用程序内部间的Activity/service的交互，在Intent的使用中不会表现出函数的调用。相对于函数的调用而言，Intent更为抽象，调用Intent的基本元素是Activity/Service。<br><a id="more"></a><br><strong>一、Intent的简介</strong></p>
</blockquote>
<p>android的Intent是目的，意图之意，是android提供的一种协助应用程序间交互和通讯的机制。intent不仅可以用于应用程序间，也可以应用于应用程序内部间的Activity/service的交互，在Intent的使用中不会表现出函数的调用。相对于函数的调用而言，Intent更为抽象，调用Intent的基本元素是Activity/Service。</p>
<p><strong>二、Intent的基本用法</strong><br>    Android中与Intent相关的还有Action/Category及IntentFilter等，以及用于广播的Intent，那下面来说明Intent的一些用法:<br>    Intent的2种基本用法为1.显示的Intent,即在构造Intent对象就指定接受者；2.隐士的Intent，即Intent的发送者在构造Intent对象时，并不知道也不关心接受者是谁。<br><strong>(1)显示的Intent</strong><br>1.同一个应用程序间Activity的切换<br>通常一个应用程序中需要多个UI 屏幕，也就需要多个Activity 类，并且在这些 Activity 之间进行切换，这种切换就是通过 Intent 机制来实现的<br>在同一个应用程序中切换 Activity时，我们通常都知道要启动的 Activity 具体是哪一个，因此常用显式的 Intent 来实现。下面的例子用来实现一个非常简单的应用程序 SimpleIntentTest ，它包括两个UI 屏幕也就是两个 Activity——SimpleIntentTest类和 TestActivity 类， SimpleIntentTest类有一个按钮用来启动 TestActivity。<br>程序的代码非常简单， SimpleIntentTest类的源代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>   <span class="class"><span class="keyword">class</span>  <span class="title">SimpleIntentTest</span>  <span class="keyword">extends</span>  <span class="title">Activity</span>  <span class="keyword">implements</span>  <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</div><div class="line"></div><div class="line">     <span class="meta">@Override</span></div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">         <span class="keyword">super</span> .onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        setContentView(R.layout. main );</div><div class="line"></div><div class="line">        Button startBtn = (Button)findViewById(R.id. start_activity );</div><div class="line"></div><div class="line">        startBtn.setOnClickListener( <span class="keyword">this</span> );</div><div class="line"></div><div class="line">    &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span>   <span class="keyword">void</span>  <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">         <span class="keyword">switch</span>  (v.getId()) &#123;</div><div class="line"></div><div class="line">         <span class="keyword">case</span>  R.id. start_activity :</div><div class="line"></div><div class="line">            Intent intent =  <span class="keyword">new</span>  Intent( <span class="keyword">this</span> , TestActivity. <span class="class"><span class="keyword">class</span> )</span>;</div><div class="line"></div><div class="line">            startActivity(intent);</div><div class="line"></div><div class="line">             <span class="keyword">break</span> ;</div><div class="line"></div><div class="line">         <span class="keyword">default</span> :</div><div class="line"></div><div class="line">             <span class="keyword">break</span> ;</div><div class="line"></div><div class="line">         &#125;</div><div class="line"></div><div class="line">    &#125;   </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Intent intent =  new  Intent( this , TestActivity. class );<br>startActivity(intent);<br>这里定义 Intent 对象时所用到的是 Intent 的构造函数之一：<br>Intent ( Context  packageContext,  Class &lt;?&gt; cls)<br>两个参数分别指定 Context 和 Class ，由于将Class 设置为 TestActivity.class，这样便显式的指定了TestActivity 类作为 该Intent 的 接收者，<br>通过后面的startActivity() 方法便可启动 TestActivity 。<br>定义好TestActivity后，则需要 在AndroidManifest.xml 中增加TestActivity 的声明:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt; activity   android:<span class="built_in">name</span> = <span class="string">".TestActivity"</span> /&gt;</div></pre></td></tr></table></figure>
<p>2.不同应用程序间Actvity的切换<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Intent</span> <span class="keyword">intent</span> =  new  <span class="keyword">Intent</span>();</div><div class="line"><span class="keyword">intent</span>.setClassName( <span class="string">"com.tope.samples.intent.simple"</span> , </div><div class="line">		 <span class="string">"com.tope.samples.intent.simple.TestActivity"</span> );</div><div class="line">startActivity(<span class="keyword">intent</span>);</div></pre></td></tr></table></figure></p>
<p><strong>(2).隐式 Intent(Implicit Intent)</strong><br>        如果 Intent 机制仅仅提供上面的显式 Intent 用法的话，这种相对复杂的机制似乎意义并不是很大。确 实，Intent 机制更重要的作用在于下面这种隐式的 Intent ，即 Intent 的发送者不指定接收者，很可能不知道也不关心接收者是谁，而由 Android 框架去寻找最匹配的接收者<br>1.最简单的隐式Intent<br>下面定义一个用来启动 Android 自带的打电话功能的 Dialer 程序。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>   <span class="class"><span class="keyword">class</span>  <span class="title">ImplicitIntentTest</span>  <span class="keyword">extends</span>  <span class="title">Activity</span>     </span></div><div class="line"></div><div class="line">     <span class="keyword">implements</span>  <span class="title">View</span>.<span class="title">OnClickListener</span>&#123;</div><div class="line"></div><div class="line">     <span class="comment">/**   Called   when   the   activity   is   first   created.   */</span></div><div class="line"></div><div class="line">     <span class="meta">@Override</span></div><div class="line"></div><div class="line">     <span class="keyword">public</span>   <span class="function"><span class="keyword">void</span>  <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">         <span class="keyword">super</span> .onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        setContentView(R.layout. main );</div><div class="line"></div><div class="line">        Button startBtn = (Button)findViewById(R.id. dial );</div><div class="line"></div><div class="line">        startBtn.setOnClickListener( <span class="keyword">this</span> );</div><div class="line"></div><div class="line">    &#125;</div><div class="line">     <span class="keyword">public</span>   <span class="function"><span class="keyword">void</span>  <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">         <span class="keyword">switch</span>  (v.getId()) &#123;</div><div class="line"></div><div class="line">         <span class="keyword">case</span>  R.id. dial :</div><div class="line"></div><div class="line">            Intent intent =  <span class="keyword">new</span>  Intent(Intent. ACTION_DIAL );</div><div class="line"></div><div class="line">            startActivity(intent);</div><div class="line"></div><div class="line">             <span class="keyword">break</span> ;</div><div class="line"></div><div class="line">         <span class="keyword">default</span> :</div><div class="line"></div><div class="line">             <span class="keyword">break</span> ;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;   </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与显示Intent的方式不同，此方式指定接受者，初始化Intent时，只是传入Intent. ACTION_DIAL参数，没有显示的支持哪个接收者。<br>2.增加一个接收者<br>若接收者希望能接收某些Intent，则需要在AndroidMainfest.xml中增加Activity的声明，并设置对应的IntentFilter,Action，如:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt; <span class="attr">activity</span>   <span class="attr">android:name</span> = <span class="string">".TestActivity"</span> &gt;</span></div><div class="line"></div><div class="line">         <span class="tag">&lt; <span class="attr">intent-filter</span> &gt;</span></div><div class="line"></div><div class="line">             <span class="tag">&lt; <span class="attr">action</span>   <span class="attr">android:name</span> = <span class="string">"android.intent.action.DEFAULT"</span>   /&gt;</span></div><div class="line"></div><div class="line">             <span class="tag">&lt; <span class="attr">action</span>   <span class="attr">android:name</span> = <span class="string">"android.intent.action.DIAL"</span>   /&gt;</span></div><div class="line"></div><div class="line">             <span class="tag">&lt; <span class="attr">category</span>   <span class="attr">android:name</span> = <span class="string">"android.intent.category.DEFAULT"</span>  /&gt;</span></div><div class="line"></div><div class="line">         <span class="tag">&lt;/ <span class="attr">intent-filter</span> &gt;</span></div><div class="line"></div><div class="line">     <span class="tag">&lt;/ <span class="attr">activity</span> &gt;</span></div></pre></td></tr></table></figure>
<p>Intent Filter 及 Action, Category 等概念—— Intent 发送者设定 Action 来说明将要进行的动作，而 Intent 的接收者在 AndroidManifest.xml 文件中通过设定 Intent Filter来声明自己能接收哪些Intent</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;android的Intent是目的，意图之意，是android提供的一种协助应用程序间交互和通讯的机制。intent不仅可以用于应用程序间，也可以应用于应用程序内部间的Activity/service的交互，在Intent的使用中不会表现出函数的调用。相对于函数的调用而言，Intent更为抽象，调用Intent的基本元素是Activity/Service。&lt;br&gt;
    
    </summary>
    
      <category term="android开发" scheme="http://blog.greekw.com/categories/android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="android" scheme="http://blog.greekw.com/tags/android/"/>
    
      <category term="Intent" scheme="http://blog.greekw.com/tags/Intent/"/>
    
  </entry>
  
  <entry>
    <title>python基础详解</title>
    <link href="http://blog.greekw.com/2015/10/22/python%E5%9F%BA%E7%A1%80%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.greekw.com/2015/10/22/python基础详解/</id>
    <published>2015-10-22T07:47:17.000Z</published>
    <updated>2017-03-11T11:36:05.401Z</updated>
    
    <content type="html"><![CDATA[<p>Python是一种简单易学，功能强大的编程语言，它有高效率的高层数据结构，能简单而有效地实现面向对象编程。Python简洁的语法和对动态输入的支持，再加上解释性语言的本质，使得它在大多数平台上的很多领域都是一个理想的脚本语言，特别适用于快速的应用程序开发。<br><a id="more"></a></p>
<h2 id="一、语句和语法"><a href="#一、语句和语法" class="headerlink" title="一、语句和语法"></a>一、语句和语法</h2><pre><code>python具有一些基本的规则和特殊字符，说明如下：
#:用于注释内容
\n:用于分隔符
\:继续上一行
如 if(A==1) and \
        (B==2):
                return    

特殊情况为:&apos;&apos;&apos;(三引号下的内容可跨行) 2.给一些变量赋值

;将两个语句连接在一行中  
如:import sys;x=&apos;foo&apos; sys.stdout.write(x) 此方式不提倡

:将代码块的头和体分开
缩进相同的一组语句构成代码块，如if while def class等 以(:)结束 ，则该行后的一行或多行称为代码组
代码块(语句):用缩进的方式体现
py文件是以模块的方式组织
每一个python脚本可以称为一个模块，以文件的方式存储。模块的中内容可以是可直接执行脚本，一些类库函数 或被导入的调用
</code></pre><h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><pre><code>    (1)赋值操作(注意pyton赋值不是将一个值赋给另一个变量 而是将该对象的引用赋值给变量)   
            如 aList=[1,2,3,&apos;abc&apos;,23.44] aStr=&apos;hello&apos;        
    (2)增量操作
            等号和一个算术操作符构成一个增量操作符 如x+=1  -= %= **= 
            但python不支持类似x++ 或x--等自增或自减
    (3)多重赋值
       如x=y=z=1
       另一种为将多个变量同时赋值.如 x,y,z=1,3,&apos;abc&apos;
       交换两个变量的赋值可以通过多元赋值实现
       如:x,y=1,2
       x,y=y,x

**标识符**
标识符是有效字符串的集合 其中有一部分构成保留字 不能用于其他用途
pyhon标识符规则:
 1.第一个字符必须是字母或下划线
 2.其他字符需是字母，下划线或数字组成
 3.大小写敏感
(2)关键字
(3)内建
(4)专用下划线标识符
    python可以用下划线作为变量的前缀或后缀指定特殊变量符，说明如下
    1._xxx 不要from module import * 导入
    2._XXX_ 系统定义的名字
    3._xxx 类中的私有变量 在模块或类外不可以使用
</code></pre><h2 id="三、编程风格"><a href="#三、编程风格" class="headerlink" title="三、编程风格"></a>三、编程风格</h2><pre><code>    1.注释
    2.文档
     python 提供了一种机制，可以用_doc_特殊变量 动态获取文档内容 ，在类 模块或函数声明中第一个没有赋值的字符串可用属性obj._doc_来访问
    3.缩进
(2).模块的结构和布局
    用模块组织python的代码 将其应用到每一个文件，如
    1.起始行
    2.模块文档
        说明模块的功能和全局变量的含义。可以通过module._doc_访问
    3.模块导入
    4.变量定义
        次变量定义为全局变量，在本模块的所有函数都可以使用，但通常使用局部变量代替全局变量
    5.类定义 (类的文档变量是class._doc_)
    6.函数定义(函数的文档变量是function._doc_)
    7.主程序
        无论是被导入的模块还是作为直接执行的脚本，此部分都会执行，是根据执行模式调用不同的函数
        python可以用如下方式检测该模块是被导入的模块还是被直接执行
        A.若模块是被导入，__name__的值为模块的名字
        B.若模块是直接执行,__name__的值为__main__
</code></pre><h2 id="四、内存管理"><a href="#四、内存管理" class="headerlink" title="四、内存管理"></a>四、内存管理</h2><pre><code>变量无须事先声明
变量无须指定类型
不需要关心内存回收
del语句可直接释放资源
</code></pre><h2 id="五、入门例子"><a href="#五、入门例子" class="headerlink" title="五、入门例子"></a>五、入门例子</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env <span class="keyword">python</span></div><div class="line"></div><div class="line"><span class="string">'makeTextFile.py -- create text file'</span></div><div class="line"></div><div class="line">import os</div><div class="line"></div><div class="line"># <span class="built_in">get</span> filename</div><div class="line"><span class="keyword">while</span> True:</div><div class="line">    fname = raw_input(<span class="string">'Enter file name: '</span>)</div><div class="line">    <span class="keyword">if</span> os.path.<span class="built_in">exists</span>(fname):</div><div class="line">        <span class="keyword">print</span><span class="string">"*** ERROR: '%s' already exists"</span> % fname</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line"># <span class="built_in">get</span> <span class="keyword">file</span> content (text) lines</div><div class="line"><span class="keyword">all</span> = []</div><div class="line"><span class="keyword">print</span> <span class="string">"\nEnter lines ('.' by itself to quit).\n"</span></div><div class="line"></div><div class="line"># loop until user terminates <span class="built_in">input</span></div><div class="line"><span class="keyword">while</span> True:</div><div class="line">    entry = raw_input(<span class="string">'&gt; '</span>)</div><div class="line">    <span class="keyword">if</span> entry == <span class="string">'.'</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">all</span>.<span class="keyword">append</span>(entry)</div><div class="line"></div><div class="line"># <span class="keyword">write</span> lines <span class="keyword">to</span> <span class="keyword">file</span> with NEWLINE <span class="built_in">line</span> terminator</div><div class="line">fobj = <span class="keyword">open</span>(fname, <span class="string">'w'</span>)</div><div class="line">fobj.<span class="keyword">write</span>(<span class="string">'\n'</span>.<span class="keyword">join</span>(<span class="keyword">all</span>))</div><div class="line">fobj.<span class="keyword">close</span>()</div><div class="line"><span class="keyword">print</span> <span class="string">'DONE!'</span></div></pre></td></tr></table></figure>
<h2 id="六、相关的模块和开发工具"><a href="#六、相关的模块和开发工具" class="headerlink" title="六、相关的模块和开发工具"></a>六、相关的模块和开发工具</h2><p>调试器:pdb<br>记录器:logging<br>性能测试器:profile hotshot </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python是一种简单易学，功能强大的编程语言，它有高效率的高层数据结构，能简单而有效地实现面向对象编程。Python简洁的语法和对动态输入的支持，再加上解释性语言的本质，使得它在大多数平台上的很多领域都是一个理想的脚本语言，特别适用于快速的应用程序开发。&lt;br&gt;
    
    </summary>
    
      <category term="python开发" scheme="http://blog.greekw.com/categories/python%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="python" scheme="http://blog.greekw.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>主流HTML5游戏开发引擎的分析和对比</title>
    <link href="http://blog.greekw.com/2015/10/22/%E4%B8%BB%E6%B5%81HTML5%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%BC%95%E6%93%8E%E7%9A%84%E5%88%86%E6%9E%90%E5%92%8C%E5%AF%B9%E6%AF%94/"/>
    <id>http://blog.greekw.com/2015/10/22/主流HTML5游戏开发引擎的分析和对比/</id>
    <published>2015-10-22T07:47:17.000Z</published>
    <updated>2017-03-11T11:36:05.401Z</updated>
    
    <content type="html"><![CDATA[<p>HTML 5是近十年来Web开发标准最巨大的飞跃。和以前的版本不同，HTML 5并非仅仅用来表示Web内容，它的新使命是将Web带入一个成熟的应用平台，在HTML 5平台上，视频，音频，图象，动画，以及同电脑的交互都被标准化<br><a id="more"></a></p>
<h2 id="一、引擎说明"><a href="#一、引擎说明" class="headerlink" title="一、引擎说明"></a>一、引擎说明</h2><p>本文主要选取了Construct2、ImactJS、LimeJS、GameMaker、CreateJS、lycheeJS、Crafty、three.js、melonJS、Turbulenz、Quintus、Cocos2d-html5等进行了简要介绍和对比，主要是根据网上的资料整理而成。<br>主流框架对比</p>
<h3 id="Construct2"><a href="#Construct2" class="headerlink" title="Construct2"></a>Construct2</h3><p>Construct 2是一个运行于Windows平台的游戏制作工具，它可以让没有任何编程基础的用户在短时间内不写一行代码快速开发出一款可运行于所有平台（Windows、Mac、Linux、Android、iOS等）的游戏。免费版可以将游戏导出成HTML5。收费版本分为个人版（79英镑）和企业版（259英镑），可以导出所有平台的版本，同时提供了更多的特效和音乐。如果使用该工具盈利超过5000美元，需要升级到企业版。</p>
<p>优点：</p>
<ol>
<li>简单易用，可实时运行游戏</li>
<li>强大的事件系统，可以不通过写代码来控制游戏逻辑</li>
<li>提供了可编程扩展的接口</li>
<li>提供了大量特效，支持物理效果</li>
<li>支持所有平台</li>
<li>完整的文档以及社区支持</li>
</ol>
<p>缺点：<br>不如直接写代码灵活</p>
<p>参考资料：</p>
<ol>
<li>官方网站</li>
<li>Construct 2 vs. Javascript</li>
</ol>
<h3 id="ImpactJS"><a href="#ImpactJS" class="headerlink" title="ImpactJS"></a>ImpactJS</h3><p>ImpactJS是一个基于JavaScript的HTML5游戏引擎，同时支持PC和移动平台浏览器。它是目前除了Construct2之外最受欢迎的HTML5游戏引擎，使用需要支付99美元。</p>
<p>优点：</p>
<ol>
<li>提供了灵活的关卡编辑器，可以快速构建游戏地图</li>
<li>提供了强大的调试工具</li>
<li>提供了Ejecta可以将JavaScript的执行结果通过OpenGL渲染出来，可以在iOS平台上获得与原生应用相近的效率</li>
<li>文档齐全，有两本专门介绍ImpactJS开发的书</li>
<li>支持物理效果</li>
<li>支持自己编写插件来扩展</li>
</ol>
<p>App Store游戏</p>
<ol>
<li>Biolab Disaster</li>
<li>Drop JS</li>
</ol>
<h3 id="LimeJS"><a href="#LimeJS" class="headerlink" title="LimeJS"></a>LimeJS</h3><p>LimeJS是一个基于Google Closure Library开发的HTML5游戏框架，继承了Closure代码易读易懂、架构清楚的特性。同时提供了游戏中各种通用实体的封装，如Director、Scene、Layer、Event和Animation等，与Cocos2d的API类似。它是由Digital Fruit公司创建。</p>
<p>优点：</p>
<ol>
<li>基于Apache协议的开源框架</li>
<li>功能强大，文档齐全，与ImactJS类似</li>
<li>支持物理效果</li>
<li>与Cocos2d的API类似，容易上手</li>
</ol>
<p>缺点：<br>依赖于Google Closure</p>
<h3 id="GameMaker"><a href="#GameMaker" class="headerlink" title="GameMaker"></a>GameMaker</h3><p>GameMaker与Construct 2类似，都是一个游戏制作工具，可以导出到各个平台运行，分为免费版、标准版（49.99美元）、专业版（99.99美元）和大师版（799.99美元）。其中免费版只能导出Mac和Windows版本，导出HTML5需要大师版或者专业版（再额外支付99.99美元）。</p>
<p>优点和缺点：<br>优势与Construct2类似，但性价比不如Construct2高</p>
<h3 id="CreateJS-EaselJS"><a href="#CreateJS-EaselJS" class="headerlink" title="CreateJS(EaselJS)"></a>CreateJS(EaselJS)</h3><p>CreateJS是Adobe官方赞助的开源开发框架，它大部分API都是基于Flash原有的API来模仿实现的，并且官方提供了直接把Flash动画转成JS数据包的工具，调用起来很方便。CreateJS提供了若干开发套件及工具，分别是：EaselJS（负责图形、事件、触控、滤镜等功能）、TweenJS（补间动画）、SoundJS（音频控制）、PreloadJS（文件加载）和Zoë（生成图片精灵及动画数据）。</p>
<p>优点：</p>
<ol>
<li>Flash开发者很容易上手</li>
<li>提供了Flash转html5的工具，可以将部分Flash代码进行转换再修改</li>
<li>基于MIT协议的开源框架</li>
<li>类库设计非常独立，包含不同的模块，可选择性使用</li>
</ol>
<h3 id="lycheeJS"><a href="#lycheeJS" class="headerlink" title="lycheeJS"></a>lycheeJS</h3><p>lycheeJS是一个环境独立的JavaScript游戏引擎，可以在任何支持JavaScript的环境中运行。它的理念是做最快的JavaScript游戏引擎。</p>
<p>优点：</p>
<ol>
<li>同时支持PC（Firefox、Chrome、Opera、Safari、IE）和移动平台（WebKit、Chrome、Firefox、Safari）的浏览器</li>
<li>提供了CDN、WebSockets、SPDY、HTTP2.0以及游戏截图的支持</li>
<li>提供了可以直接导出第三方（Facebook、AppStore、Google Play Store）资源包来发布</li>
<li>基于MIT协议的开源框架</li>
</ol>
<h3 id="Crafty"><a href="#Crafty" class="headerlink" title="Crafty"></a>Crafty</h3><p>Crafty是一个体积小、简单、轻量级的2D的HTML5游戏引擎，它提供了通过Canvas或DOM来绘制实体，提供了精灵Map以及SAT高级碰撞监测支持。它是由个人（Louis Stowasser）创建，同时由Github上的一些开发者共同开发。</p>
<p>优点</p>
<ol>
<li>体积小</li>
<li>轻量级引擎，不会受到框架的太多束缚</li>
<li>同时支持PC和移动平台浏览器</li>
</ol>
<h3 id="three-js"><a href="#three-js" class="headerlink" title="three.js"></a>three.js</h3><p>Three.js是一个轻量级的JavaScript库，用于在浏览器上创建和显示3D图形。它可以同时使用Canvas、SVG或WebGL进行绘制。</p>
<p>优点和缺点：<br>支持3D，但是不适合做2D游戏</p>
<h3 id="melonJS"><a href="#melonJS" class="headerlink" title="melonJS"></a>melonJS</h3><p>melonJS是melonJS团队对Javascript热情以及开发经验的结晶，是一个简单、免费、而且独立的类库。</p>
<p>优点</p>
<ol>
<li>轻量级的2D引擎</li>
<li>支持所有主流的PC和移动平台浏览器</li>
<li>支持使用Tiled map editor来创建和编辑地图</li>
<li>支持多声道音频</li>
<li>基于MIT协议的开源框架</li>
</ol>
<h3 id="Turbulenz"><a href="#Turbulenz" class="headerlink" title="Turbulenz"></a>Turbulenz</h3><p>Turbulenz是一个开源的HTML5游戏引擎，提供了可以运行在Windows、MacOS、Linux上的SDK，允许开发人员创建高质量和硬件加速的2D、3D游戏。包括以下功能：异步资源加载、进行特效和粒子渲染、支持物理效果、碰撞检测以及动画、3D音效支持、支持网络交互以及社交网络分享、场景和资源的管理。</p>
<p>优点：</p>
<ol>
<li>功能强大，同时支持2D和3D</li>
<li>基于MIT协议的开源引擎</li>
</ol>
<h3 id="Quintus"><a href="#Quintus" class="headerlink" title="Quintus"></a>Quintus</h3><p>Quintus是一个容易上手、轻量级、且模块化的HTML5游戏引擎。它引用面向对象的思想来进行HTML5游戏开发，同时依赖于jQuery来提供事件处理机制和元素选取操作。</p>
<p>缺点</p>
<ol>
<li>依赖于jQuery</li>
<li>目前引擎仍处于初级阶段，还很不成熟</li>
</ol>
<h3 id="Cocos2d-html5"><a href="#Cocos2d-html5" class="headerlink" title="Cocos2d-html5"></a>Cocos2d-html5</h3><p>Cocos2d-html5是一款基于Cocos2d-x API的2D开源免费HTML5游戏引擎。它目前通过canvas进行渲染，将来会支持WebGL。它由国内Cocos2d-x核心团队主导开发和维护，行业领袖、HTML5大力推动者Google为这个项目提供支持。同时，Zynga、Google等大公司的工程师也参与到它的设计工作中。</p>
<p>优点：</p>
<ol>
<li>与Cocos2d的API类似，容易上手</li>
<li>中文文档齐全，资料丰富</li>
<li>基于MIT协议的开源引擎</li>
</ol>
<h2 id="二、各框架具体参数对比"><a href="#二、各框架具体参数对比" class="headerlink" title="二、各框架具体参数对比"></a>二、各框架具体参数对比</h2><ol>
<li>各HTML5游戏框架对比HTML5 Game Engines</li>
<li>List of JS Game Engines</li>
<li>对于Crafty、Lime、Frozen、Melon、Impact、Quintus框架，可以在Breakouts上查看用这些引擎开发同一个游戏的效果以及代码风格。Breakouts中使用到的特性包括碰撞检测、精灵动画、音效、地图、场景切换、交互、文字渲染、移动平台支持。</li>
<li>以上各引擎中，除了Construct2、ImpactJS、GameMaker是收费的之外，其他引擎都是免费并且开源的。对于开源引擎，我们可以从Github上面的关注度了解到该引擎的流行程度，关注的人越多，遇到问题越容易解决。同时一般来说，项目开发者越多，版本更新越快；项目的进行时间越长则越成熟。下面将对各开源引擎的开发者人数、项目启动时间、关注度进行对比。<br>Game Engine    Github commits    Github contributors    Start time    Github Star    Github Fork<br>LimeJS    532    22    2011.1.19    1091    187<br>EaselJS    784    15    2011.1.23    2758    650<br>lycheeJS    4    1    2012.9.5    110    20<br>Crafty    1182    67    2010.11.5    993    225<br>three.js    6409    198    2010.3.23    12691    2816<br>melonJS    1287    15    2011.4.11    643    137<br>Turbulenz    736    12    2013.4.26（最近才开源）    1522    207<br>Quintus    118    11    2012.8.4    450    89<br>Cocos2d-html5    2706    39    2012.1.28    735    303</li>
</ol>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>以上各引擎中，Construct2、ImpactJS、GameMaker三个是收费的，其中Construct2与GameMaker更像一个游戏开发工具，可以实现不用写一行代码来制作游戏，更适合于没有编程基础的人使用。而ImpactJS作为一个高质量的框架，且易于扩展，虽然是收费的，但是物有所值。</p>
<p>开源引擎中，three.js是最火的，但是仅限于开发3D游戏。其次是CreateJS，由Adobe官方赞助且采用Flash类似的API以及模块化开发，是Flash开发者以及将Flash游戏转换成html5不可多得的选择。Turbulenz虽然开源时间比较晚，但颇有后来者居上的趋势，由于其对2D和3D的同时支持，是同时开发2D和3D游戏的最佳选择。LimeJS与Crafty相比的优势在于有一个公司进行维护，相比个人要更稳定，但是需要依赖于Google Closure，也使之成为一个重量级的框架。Crafty体积小、轻量级，更适合于小游戏的开发。Cocos2d-html5作为国产框架的一个优势在于中文文档和教程多，且得到了Google的支持，但相比ImpactJS、CreateJS仍不够成熟。melonJS、Quintus、lycheeJS的开发者和使用者都较少，相关文档和教程也相对少，还有待观察。</p>
<p>参考资料</p>
<ol>
<li>JavaScript Game Engine Comparison</li>
</ol>
<p>转自:<a href="http://blog.csdn.net/zhaoxy_thu/article/details/11867123" target="_blank" rel="external">http://blog.csdn.net/zhaoxy_thu/article/details/11867123</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML 5是近十年来Web开发标准最巨大的飞跃。和以前的版本不同，HTML 5并非仅仅用来表示Web内容，它的新使命是将Web带入一个成熟的应用平台，在HTML 5平台上，视频，音频，图象，动画，以及同电脑的交互都被标准化&lt;br&gt;
    
    </summary>
    
      <category term="HTML5开发" scheme="http://blog.greekw.com/categories/HTML5%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="HTML5" scheme="http://blog.greekw.com/tags/HTML5/"/>
    
      <category term="游戏引擎" scheme="http://blog.greekw.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>核心java系列——线程（二）</title>
    <link href="http://blog.greekw.com/2015/10/21/%E6%A0%B8%E5%BF%83java%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://blog.greekw.com/2015/10/21/核心java系列——线程（二）/</id>
    <published>2015-10-21T07:47:17.000Z</published>
    <updated>2017-03-11T11:36:05.432Z</updated>
    
    <content type="html"><![CDATA[<p>在大多数实际应用中，常常存在两个或两个以上的线程共享对同一数据的存储。如果多个线程去对同一对象的数据进行修改，则会引起线程竞争资源，导致数据被修改错误的问题，<br>比如在ATM机上取款，多个用户对同一账户进行操作就会很容易发生。所以下面分析如何解决多线程共享资源引起竞争导致数据破坏问题。<br><a id="more"></a></p>
<h3 id="一、锁的原理"><a href="#一、锁的原理" class="headerlink" title="一、锁的原理"></a><strong>一、锁的原理</strong></h3><p>java中为每一个对象都提供了锁机制，用synchronized关键字修饰，它可以修饰方法和代码块。当一个对象获得该锁时，只能充许一个线程对该对象进行操作，其他线程处于等待状态，直到该线程释放锁。<br>锁时可以重复利用的，锁有一个持有计数器来记录被利用的情况。线程可以根据计数器去加锁和释放锁。<br>条件对象可以理解为临界区，线程只有在满足某一条件后才能使用它，一个锁对象可以有一个或多个相关的条件对象。以下为同步实例的实现:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> x=<span class="number">100</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FooThread</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(name);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</div><div class="line">			x=<span class="keyword">this</span>.sub(x, <span class="number">30</span>);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">1</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">" : 当前的x值= "</span> +x); </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> x=x-y;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、内部锁"><a href="#二、内部锁" class="headerlink" title="二、内部锁"></a><strong>二、内部锁</strong></h3><p>内部锁将类的相关静态方法加上synchronized关键字,比如Bank类有一个静态同步的方法，那么当该方法被调用时，Bank.class将会被调用对象锁住，则其他线程无法再调用该类中的对象和其他同步的静态方法。<br>内部锁也存在以下局限性：<br>1.无法中断一个在视图获得锁的线程<br>2.视图锁得锁事不能设定超时<br>3.每一个锁仅有一个单一条件</p>
<h3 id="三、同步阻塞"><a href="#三、同步阻塞" class="headerlink" title="三、同步阻塞"></a><strong>三、同步阻塞</strong></h3><p>如果线程试图进入同步方法，而其锁已经被占用，则线程在该对象上被阻塞。实质上，线程进入该对象的的一种池中，必须在哪里等待，直到其锁被释放，该线程再次变为可运行或运行为止。<br>当考虑阻塞时，一定要注意哪个对象正被用于锁定：<br>1、调用同一个对象中非静态同步方法的线程将彼此阻塞。如果是不同对象，则每个线程有自己的对象的锁，线程间彼此互不干预。<br>2、调用同一个类中的静态同步方法的线程将彼此阻塞，它们都是锁定在相同的Class对象上。<br>3、静态同步方法和非静态同步方法将永远不会彼此阻塞，因为静态方法锁定在Class对象上，非静态方法锁定在该类的对象上。<br>4、对于同步代码块，要看清楚什么对象已经用于锁定（synchronized后面括号的内容）。在同一个对象上进行同步的线程将彼此阻塞，在不同对象上锁定的线程将永远不会彼此阻塞。<br><strong>volatile域</strong><br>若仅仅为了读写一个或两个实例域就使用同步，这对资源的开销过大。volatile是为实例域的访问提供了一种免锁机制，若声明一个实例域为volatile，则虚拟机就知道该域可能被其他线程并发访问。声明方式：<br>private volatile boolean flag;<br>还有一种用于原子整数，浮点数等的包装器类 Atomic可以应用于程序的并发访问，保证域的安全。<br>总之，在以下三个条件下，域的并发访问是安全的:<br>1.域是final 并且在在构造器调用完成后访问<br>2.对域的访问由公有的锁进行保护<br>3.域是volatile的</p>
<h3 id="四、线程安全"><a href="#四、线程安全" class="headerlink" title="四、线程安全"></a><strong>四、线程安全</strong></h3><p>当一个类已经很好的同步以保护它的数据时，这个类就称为“线程安全的”。<br>即使是线程安全类，也应该特别小心，因为操作的线程是间仍然不一定安全。<br>举个形象的例子，比如一个集合是线程安全的，有两个线程在操作同一个集合对象，当第一个线程查询集合非空后，删除集合中所有元素的时候。第二个线程也来执行与第一个线程相同的操作，也许在第一个线程查询后，第二个线程也查询出集合非空，但是当第一个执行清除后，第二个再执行删除显然是不对的，因为此时集合已经为空了。程序说明如下:</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Demo4 &#123;</div><div class="line">	@SuppressWarnings(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="keyword">private</span> List resultList=Collections.synchronizedList(<span class="keyword">new</span> LinkedList());</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="built_in">add</span>(<span class="keyword">String</span> param)&#123;</div><div class="line">		resultList.<span class="built_in">add</span>(param);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">String</span> remove()&#123;</div><div class="line">		<span class="keyword">if</span>(resultList.<span class="built_in">size</span>()&gt;<span class="number">0</span>)&#123;</div><div class="line">			<span class="keyword">return</span> (<span class="keyword">String</span>) resultList.remove(<span class="number">0</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>测试调用</strong></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public static void main(<span class="type">String</span>[] args) &#123;</div><div class="line">	<span class="keyword">final</span> <span class="type">Demo4</span> d=<span class="keyword">new</span> <span class="type">Demo4</span>();</div><div class="line">	d.add(<span class="string">"test"</span>);</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		public void run() &#123;</div><div class="line">			<span class="type">String</span> param=d.remove();</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="type">Thread</span>.sleep(<span class="number">1</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			<span class="type">System</span>.out.println(param);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="type">Thread</span> t1=<span class="keyword">new</span> <span class="type">Test</span>();</div><div class="line">	<span class="type">Thread</span> t2=<span class="keyword">new</span> <span class="type">Test</span>();</div><div class="line">	t1.start();</div><div class="line">	t2.start();</div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>虽然集合对象  private List nameList = Collections.synchronizedList(new LinkedList());<br>是同步的，但若remove()方法的synchronized去掉后，会引起线程不安全问题。</p>
<h3 id="五、死锁"><a href="#五、死锁" class="headerlink" title="五、死锁"></a><strong>五、死锁</strong></h3><p>锁和条件不能解决多线程中所有问题，当多个线程发生阻塞时，每个线程在等待另一线程释放资源会发生死锁，比如 账户A：200元，账户B:300元，A线程从账户A转移300到账户B,线程B从账户B转移400到账户A，因为A和B账户的余额都不足，无法进行转换，两个线程无法继续执行，而引发死锁状态。下面看一个发生死锁的实例:</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class DeadLock implements Runnable &#123;</div><div class="line">	<span class="built_in">int</span> flag=<span class="number">1</span>;</div><div class="line">	<span class="keyword">final</span> <span class="keyword">Object</span> o1=<span class="keyword">new</span> <span class="keyword">Object</span>();</div><div class="line">	<span class="keyword">final</span> <span class="keyword">Object</span> o2=<span class="keyword">new</span> <span class="keyword">Object</span>();</div><div class="line">	@Override</div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"flag="</span>+flag);</div><div class="line">		<span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">synchronized</span> (o1) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">300</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">synchronized</span> (o2) &#123;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"1"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</div><div class="line">			<span class="keyword">synchronized</span> (o2) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.sleep(<span class="number">300</span>);</div><div class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">synchronized</span> (o1) &#123;</div><div class="line">				System.out.<span class="built_in">println</span>(<span class="string">"2"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>程序说明:</strong></p>
<p> ◆ 一个线程（ThreadA）调用run()。 </p>
<p>  ◆ ThreadA在o1上同步，但允许被抢先执行。 </p>
<p>  ◆ 另一个线程（ThreadB）开始执行。 </p>
<p>  ◆ ThreadB调用run()。 </p>
<p>  ◆ ThreadB获得o2，继续执行，企图获得o1。但ThreadB不能获得o1，因为ThreadA占有o1。 </p>
<p>  ◆ 现在，ThreadB阻塞，因为它在等待ThreadA释放o1。 </p>
<p>  ◆ 现在轮到ThreadA继续执行。ThreadA试图获得o2，但不能成功，因为o2已经被ThreadB占有了。 </p>
<p>  ◆ ThreadA和ThreadB都被阻塞，程序死锁。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在大多数实际应用中，常常存在两个或两个以上的线程共享对同一数据的存储。如果多个线程去对同一对象的数据进行修改，则会引起线程竞争资源，导致数据被修改错误的问题，&lt;br&gt;比如在ATM机上取款，多个用户对同一账户进行操作就会很容易发生。所以下面分析如何解决多线程共享资源引起竞争导致数据破坏问题。&lt;br&gt;
    
    </summary>
    
      <category term="核心java" scheme="http://blog.greekw.com/categories/%E6%A0%B8%E5%BF%83java/"/>
    
    
      <category term="java" scheme="http://blog.greekw.com/tags/java/"/>
    
      <category term="多线程" scheme="http://blog.greekw.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>核心java系列——线程（一）</title>
    <link href="http://blog.greekw.com/2015/10/20/%E6%A0%B8%E5%BF%83java%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://blog.greekw.com/2015/10/20/核心java系列——线程（一）/</id>
    <published>2015-10-20T07:47:17.000Z</published>
    <updated>2017-03-11T11:36:05.416Z</updated>
    
    <content type="html"><![CDATA[<p>多线程是程序中有多个线程流在同时调度资源。线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),一个线程可以创建和撤销另一个线程。<br><a id="more"></a></p>
<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><blockquote>
<p>多线程是程序中有多个线程流在同时调度资源。线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),一个线程可以创建和撤销另一个线程。</p>
</blockquote>
<h3 id="二、线程和进程"><a href="#二、线程和进程" class="headerlink" title="二、线程和进程"></a>二、线程和进程</h3><p>1.进程是程序运行的实例，每一个进程都有自己的内存空间，包含内容和数据，不同进程间有相互独立的地址空间<br>2.线程是CPU调度的基本单位，每一个线程都有顺序执行的，线程有共享资源和锁机制。<br>3.两者区别和联系<br>(1) 划分尺度:线程更小，所以多线程程序并发性更高;<br>(2) 资源分配：进程是资源分配的基本单位，同一进程内多个线程共享其资源;<br>(3) 地址空间：进程拥有独立的地址空间，同一进程内多个线程共享其资源;<br>(4) 处理器调度：线程是处理器调度的基本单位;<br>(5) 执行：每个线程都有一个程序运行的入口，顺序执行序列和程序的出口，但线程不能单独执行，必须组成进程，<br>    一个进程至少有一个主线程。简而言之,一个程序至少有一个进程,一个进程至少有一个线程</p>
<h4 id="三、线程的创建和启动"><a href="#三、线程的创建和启动" class="headerlink" title="三、线程的创建和启动"></a>三、线程的创建和启动</h4><p>线程创建有2中方式，一是实现Runnable接口，实现run()方法，然后创建一个Thread对象，将<br>而是继承Thread类，实现run方法。两者都需要调用start()方法来启动线程。下面是两者方法的程序实现：<br>1.继承Thread方式</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public void run() &#123;</div><div class="line">		<span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">			<span class="type">System</span>.out.println(<span class="type">Thread</span>.currentThread().getName()+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>2.实现Runnable接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">			System.out.println(Thread.currentThread().getName()+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、线程的状态"><a href="#四、线程的状态" class="headerlink" title="四、线程的状态"></a>四、线程的状态</h3><p>   线程运行时也有它的生命周期，线程会要经历开始（等待），运行，挂起（阻塞）和终止四种不同的状态，且四种状态可以由Thread来自由控制，下面给出Thread类控制各个状态的方法</p>
<blockquote>
<p>1.线程开始 start()/run();<br>2.线程挂起和唤醒 resume()/suspend()-已过时 sleep()；<br>3.线程终止 stop()不建议使用 interupt()；<br>4.其他与线程状态相关的方法<br>isAlive():判断线程的状态是否还活着<br>join():调用某线程的该方法，将当前线程与该线程“合并”，即等待该线程结束，再恢复当前线程的运行；<br>yield():线程的让步，即让出当前线程的资源给其他线程使用。</p>
</blockquote>
<p>状态图如下:<br><img src="http://img.blog.csdn.net/20151121203705684" alt="这里写图片描述"></p>
<p>从图中可看出线程在建立后并不马上执行run方法中的代码，而是处于等待状态。线程处于等待状态时，可以通过Thread类的方法来设置线程不各种属性，如线程的优先级（setPriority）、线程名(setName)和线程的类型（setDaemon）等。</p>
<ul>
<li>当调用start方法后，线程开始执行run方法中的代码。线程进入运行状态。可以通过Thread类的isAlive方法来判断线程是否处于运行状态。</li>
<li>当线程处于运行状态时，isAlive返回true，</li>
<li>当isAlive返回false时，可能线程处于等待状态，也可能处于停止状态。</li>
</ul>
<p><strong><em>注意:</em></strong>一但线程开始执行run方法，就会一直到这个run方法执行完成这个线程才退出。但在线程执行的过程中，可以通过两个方法使线程暂时停止执行。这两个方法是suspend和sleep。<br>在使用suspend挂起线程后，可以通过resume方法唤醒线程。而使用sleep使线程休眠后，只能在设定的时间后使线程处于就绪状态（在线程休眠结束后，线程不一定会马上执行，只是进入了就绪状态，等待着系统进行调度）。<br><strong>在使用sleep方法时有两点需要注意：</strong></p>
<blockquote>
<ol>
<li>sleep方法有两个重载形式，其中一个重载形式不仅可以设毫秒，而且还可以设纳秒(1,000,000纳秒等于1毫秒)。但大多数操作系统平台上的Java虚拟机都无法精确到纳秒，因此，如果对sleep设置了纳秒，Java虚拟机将取最接近这个值的毫秒。</li>
<li>在使用sleep方法时必须使用throws或try{…}catch{…}。因为run方法无法使用throws，所以只能使用try{…}catch{…}。当在线程休眠的过程中，使用interrupt方法中断线程时sleep会抛出一个InterruptedException异常。sleep方法的定义如下：<br>publicstaticvoid sleep(long millis) throws InterruptedException<br>publicstaticvoid sleep(long millis, int nanos) throws<br>InterruptedException</li>
</ol>
</blockquote>
<p>下面的举例为线程的合并的实现：</p>
<h4 id="A线程："><a href="#A线程：" class="headerlink" title="A线程："></a>A线程：</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DemoA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	public <span class="type">DemoA</span>(<span class="type">String</span> name)&#123;</div><div class="line">		<span class="keyword">super</span>(name);</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public void run() &#123;</div><div class="line">		<span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">			<span class="type">System</span>.out.println(<span class="type">Thread</span>.currentThread().getName()+<span class="string">"-"</span>+i);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="type">Thread</span>.sleep(<span class="number">1000</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="B线程"><a href="#B线程" class="headerlink" title="B线程:"></a>B线程:</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DemoB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="type">Thread</span> a;</div><div class="line">	public <span class="type">DemoB</span>(<span class="type">String</span> name,<span class="type">Thread</span> a)&#123;</div><div class="line">		<span class="keyword">super</span>(name);</div><div class="line">		<span class="keyword">this</span>.a=a;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	public void run() &#123;</div><div class="line">		<span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">			<span class="type">System</span>.out.println(<span class="type">Thread</span>.currentThread().getName()+<span class="string">"-"</span>+i);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="type">Thread</span>.sleep(<span class="number">1000</span>);</div><div class="line">				<span class="keyword">if</span>(i==<span class="number">4</span>)&#123;</div><div class="line">					a.join();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (<span class="type">InterruptedException</span> e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="五、线程的属性"><a href="#五、线程的属性" class="headerlink" title="五、线程的属性"></a>五、线程的属性</h3><p>线程的属性包括线程的优先级，守护线程等，明白线程的属性的作用，可以更灵活的设置线程的执行状态。</p>
<h4 id="1-线程的优先级"><a href="#1-线程的优先级" class="headerlink" title="1.线程的优先级"></a>1.线程的优先级</h4><p>每一个线程都会对应一个优先级，默认情况下，新创建的线程会继承他父类的优先级。可以利用setPriority方法来修改线程的优先级的高低。修改的范围可以使MIN_PRIORITY和MAX_PRIORITY之间的任意级别<br>下面为线程优先级设置的实例:<br><strong><em>定义的线程类:</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</div><div class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">"-"</span>+i);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Thread.sleep(<span class="number">1000</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><em>线程优先级的设置:</em></strong>    </p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//最小级别</span></div><div class="line">	<span class="keyword">Thread</span> t1=<span class="literal">new</span> <span class="keyword">Thread</span>(<span class="literal">new</span> Demo3());</div><div class="line">	t1.setPriority(<span class="keyword">Thread</span>.MIN_PRIORITY);</div><div class="line">	t1.start();</div><div class="line">	<span class="comment">//正常</span></div><div class="line">	<span class="keyword">Thread</span> t2 =<span class="literal">new</span> <span class="keyword">Thread</span>(<span class="literal">new</span> Demo3());</div><div class="line">	t2.setPriority(<span class="keyword">Thread</span>.NORM_PRIORITY);</div><div class="line">	t2.start();</div><div class="line">	<span class="comment">//最大级别</span></div><div class="line">	<span class="keyword">Thread</span> t3 =<span class="literal">new</span> <span class="keyword">Thread</span>(<span class="literal">new</span> Demo3());</div><div class="line">	t3.setPriority(<span class="keyword">Thread</span>.NORM_PRIORITY);</div><div class="line">	t3.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意:在使用线程优先级时，应避免常犯的一个错误，假如高优先级的线程处于非活跃状态，低优先级的线程也不可能会执行，而资源调度线程时会在高优先级的线程中选择，这会是低优先级的线程饿死。</p>
<h5 id="2-守护线程"><a href="#2-守护线程" class="headerlink" title="2.守护线程"></a>2.守护线程</h5><p>一般线程要转换为守护线程，可通过setDaemon(true);来设置，守护线程不会去访问固有资源，如文件，数据库等。其作用是为其他线程提供服务，如计时器的例子，守护线程可定时发送<br>信号给实现计时的线程。</p>
<h4 id="3-未捕获异常的处理器"><a href="#3-未捕获异常的处理器" class="headerlink" title="3.未捕获异常的处理器"></a>3.未捕获异常的处理器</h4><p>线程实现run方法时不会抛出可被检测的异常，而抛出的异常不能被检测到会导致线程终止，从而是程序死亡。<br>java提供了一个未捕获异常的处理器，该处理器为Thread.UncaughTExceptionHandler接口的类。从JSE5.0后，提供了setUncaughTExceptionHandler方法为线程安装处理器.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多线程是程序中有多个线程流在同时调度资源。线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),一个线程可以创建和撤销另一个线程。&lt;br&gt;
    
    </summary>
    
      <category term="核心java" scheme="http://blog.greekw.com/categories/%E6%A0%B8%E5%BF%83java/"/>
    
    
      <category term="java" scheme="http://blog.greekw.com/tags/java/"/>
    
      <category term="多线程" scheme="http://blog.greekw.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SVN使用详解</title>
    <link href="http://blog.greekw.com/2015/10/20/SVN%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.greekw.com/2015/10/20/SVN命令使用详解/</id>
    <published>2015-10-20T07:47:17.000Z</published>
    <updated>2017-03-11T11:36:05.401Z</updated>
    
    <content type="html"><![CDATA[<p> SVN全名Subversion，即版本控制系统。SVN与CVS一样，是一个跨平台的软件，支持大多数常见的操作系统。作为一个开源的版本控制系统,Subversion管理着随时间改变的数据。这些数据放置在一个中央资料档案库(repository)中。这个档案库很像一个普通的文件服务器,不过它会记住每一次文件的变动。这样你就可以把档案恢复到旧的版本,或是浏览文件的变动历史。Subversion是一个通用的系统,可用来管理任何类型的文件,其中包括了程序源码。<br><a id="more"></a><br>1.检出文件到服务器目录<br>svn checkout path（path是服务器上的目录）<br>例如：svn checkout svn://127.0.0.1/java/trunk/<br>简写：svn co<br>2、往版本库中添加新的文件<br>svn add file<br>例如：svn add HelloWorld.java<br>svn add *.java(添加当前目录下所有的java文件)<br>3、将改动的文件提交到版本库<br>svn commit -m “LogMessage“ [-N] [–no-unlock] PATH(如果选择了保持锁，就使用–no-unlock开关)<br>例如：svn commit -m “add test file for my test“ test.php<br>简写：svn ci<br> 4、加锁/解锁<br>svn lock -m “LockMessage“ [–force] PATH<br>例如：svn lock -m “lock test file“ HelloWorld.java<br>svn unlock PATH<br> 5、更新到某个版本<br>svn update -r m path<br>例如：<br>svn update如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。<br>svn update -r 200 HelloWorld.java(将版本库中的文件HelloWorld.java还原到版本200)<br>svn update HelloWorld.java(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先update，修改文件，然后清除svn resolved，最后再提交commit)<br>简写：svn up<br> 6、查看文件或者目录状态<br>1）svn status path（目录下的文件和子目录的状态，正常状态不显示）<br>【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】<br>2）svn status -v path(显示文件和子目录状态)<br>第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。<br>注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。<br>简写：svn st<br>7、删除文件<br>svn delete path -m “delete test fle“<br>例如：svn delete svn://127.0.0.1/java/trunk/src/HelloWorld.java  -m “delete test file”<br>或者直接svn delete HelloWorld.java 然后再svn ci -m ‘delete test file‘，推荐使用这种<br>简写：svn (del, remove, rm)<br>8、查看日志<br>svn log path<br>例如：svn log HelloWorld.java 显示这个文件的所有修改记录，及其版本号的变化<br>9、查看文件详细信息<br>svn info path<br>例如：svn info HelloWorld.java<br>10、比较差异<br>svn diff path(将修改的文件与基础版本比较)<br>例如：svn diff HelloWorld.java<br>svn diff -r m:n path(对版本m和版本n比较差异)<br>例如：svn diff -r 200:201 HelloWorld.java<br>简写：svn di<br>11、将两个版本之间的差异合并到当前文件<br>svn merge -r m:n path<br>例如：svn merge -r 200:205 HelloWorld.java（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下）<br>12、SVN 帮助<br>svn help<br>svn help ci<br>——————————————————————————<br>以上是常用命令，下面写几个不经常用的<br>——————————————————————————<br>13、版本库下的文件和目录列表<br>svn list path<br>显示path目录下的所有属于版本库的文件和目录<br>简写：svn ls<br>14、创建纳入版本控制下的新目录<br>svn mkdir: 创建纳入版本控制下的新目录。<br>用法:<br>        1、mkdir PATH…<br>        2、mkdir URL…<br>创建版本控制的目录。<br>        1、每一个以工作副本 PATH 指定的目录，都会创建在本地端，并且加入新增调度，以待下一次的提交。<br>        2、每个以URL指定的目录，都会透过立即提交于仓库中创建。在这两个情况下，所有的中间目录都必须事先存在。<br>15、恢复本地修改svn revert: 恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。revert:<br>         用法: revert PATH…<br>         注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复被删除的目录<br>16、代码库URL变更svn switch (sw): 更新工作副本至不同的URL。<br>用法: 1、switch URL [PATH]<br>          2、switch –relocate FROM TO [PATH…]<br>          1、更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的方法。<br>          2、改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动(比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用这个命令更新工作副本与仓库的对应关系。<br>17、解决冲突<br>svn resolved: 移除工作副本的目录或文件的“冲突”状态。<br>用法: resolved PATH…<br>注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的<br>相关文件，然后让 PATH 可以再次提交。<br>18、输出指定文件或URL的内容。<br>svn cat 目标[@版本]…如果指定了版本，将从指定的版本开始查找。<br>svn cat -r PREV filename &gt; filename (PREV 是上一版本,也可以写具体版本号,这样输出结果是可以提交的)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; SVN全名Subversion，即版本控制系统。SVN与CVS一样，是一个跨平台的软件，支持大多数常见的操作系统。作为一个开源的版本控制系统,Subversion管理着随时间改变的数据。这些数据放置在一个中央资料档案库(repository)中。这个档案库很像一个普通的文件服务器,不过它会记住每一次文件的变动。这样你就可以把档案恢复到旧的版本,或是浏览文件的变动历史。Subversion是一个通用的系统,可用来管理任何类型的文件,其中包括了程序源码。&lt;br&gt;
    
    </summary>
    
      <category term="项目管理" scheme="http://blog.greekw.com/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="版本控制" scheme="http://blog.greekw.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="SVN" scheme="http://blog.greekw.com/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>android之activity分析</title>
    <link href="http://blog.greekw.com/2015/10/20/android%E4%B9%8Bactivity%E5%88%86%E6%9E%90/"/>
    <id>http://blog.greekw.com/2015/10/20/android之activity分析/</id>
    <published>2015-10-20T07:47:17.000Z</published>
    <updated>2017-03-11T11:36:05.401Z</updated>
    
    <content type="html"><![CDATA[<p>activity是手机应用程序窗口的交互界面，一个应用程序通常会包含多个activity,都会在Mainfest.xml中指定一个入口(主的acitivity)<br><a id="more"></a></p>
<h2 id="一、什么是Activity"><a href="#一、什么是Activity" class="headerlink" title="一、什么是Activity"></a>一、什么是Activity</h2><p>activity是手机应用程序窗口的交互界面，一个应用程序通常会包含多个activity,都会在Mainfest.xml中指定一个入口(主的acitivity).<br>配置如下<br>``</p>
<p><activity android:label="@string/app_name" android:name=".MainActivity"><br>      <intent-filter><br>          <action android:name="android.intent.action.MAIN"><br>          <category android:name="android.intent.category.LAUNCHER"><br>      </category></action></intent-filter><br> </activity><br>```</p>
<p>应用第一次运行时就会看到此Activity，并可以通过此Activity去启动其他的Activity.每当新的Activity启动时，当前的Activity就会停止，新的Activity就会压入到<br>stack(先进后出)中，并获得用户焦点，当回退时，当前的Activity就回销毁，上一个Activity就会恢复</p>
<h2 id="二、activivty的什么周期"><a href="#二、activivty的什么周期" class="headerlink" title="二、activivty的什么周期"></a>二、activivty的什么周期</h2><p>流程图如下:<br>    <img src="http://img.blog.csdn.net/20151012162332940" alt="这里写图片描述"><br>涉及都的方法有onCreate()  onStart() onResume() onPause() onStop() onRestart() onDestory<br>Activity启动过程 onCreate()——&gt;onStart()——&gt;onResume()  退出Activity过程 onPause()——&gt;onStop()——&gt;onDestory()<br>按下home键回到主界面时执行过程:onPause()——&gt;onStop(),再次打开运行过程:onRestart()——&gt;onStart()——&gt;onResume()<br>以下是各个方法的说明:<br>onCreate()：当 activity 第一次创建时会被调用。在这个方法中你需要完成所有的正常静态设置 ，比如创建一个视图（ view ）、绑定列表的数据等等。<br>如果能捕获到 activity 状态的话，这个方法传递进来的 Bundle 对象将存放了 activity 当前的状态。调用该方法后一般会调用 onStart() 方法。</p>
<p>onRestart()：在 activity 被停止后重新启动时会调用该方法。其后续会调用 onStart 方法。</p>
<p>onStart()当 activity 对于用户可见前即调用这个方法。如果 activity回到前台则接着调用 onResume() ，如果 activity 隐藏则调用onStop()</p>
<p>onResume()：在 activity 开始与用户交互前调用该方法。在这时该activity 处于 activity 栈的顶部，并且接受用户的输入。其后续会调用 onPause() 方法。</p>
<p>onPause()：在系统准备开始恢复其它 activity 时会调用该方法。这个方法中通常用来提交一些还没保存的更改到持久数据 中，停止一些动画或其它一些耗 CPU 的操作等等。<br>无论在该方法里面进行任何操作，都需要较快速完成，因为如果它不返回的话，下一个 activity 将无法恢复出来。如果 activity 返回到前台将会调用 onResume() ，如果 activity 变得对用户不可见了将会调用onStop() 。</p>
<p>onStop()：在 activity 对用户不可见时将调用该方法。可能会因为当前 activity 正在被销毁，或另一个 activity （已经存在的activity 或新的 activity ）已经恢复了正准备覆盖它，而调用该方法。<br>如果 activity 正准备返回与用户交互时后续会调用onRestart ，如果 activity 正在被释放则会调用 onDestroy 。</p>
<p>onDestroy()：在 activity 被销毁前会调用该方法。这是 activity 能接收到的最后一个调用。可能会因为有人调用了 finish 方法使得当前activity 正在关闭，<br>系统为了保护内存临时释放这个 activity的实例，而调用该方法。你可以用 isFinishing 方法来区分这两种不同的情况。</p>
<h2 id="三、如何启动一个新的Activity"><a href="#三、如何启动一个新的Activity" class="headerlink" title="三、如何启动一个新的Activity"></a>三、如何启动一个新的Activity</h2><p>1.启动一个新的Activity，可以通过Context的startActivity()方法<br> 如Intent intent=new Intent(this,TestActivity.class)(其中TestActivity是需要被启动的Activity)<br>   startActivity(intent)<br>2.若启动一个新的Activity，并需要传递数据到此Activity<br>    Intent intent=new Intent(this,TestActivity.class)(其中TestActivity是需要被启动的Activity)<br>    Bundle bundle=new Bundle();<br>    bundle.putString(“name”,”张三”)<br>    intent.putExtra(bundle)<br>    startActivity(intent)<br>3.若启动新的带返回值的Activity,并将返回值传给启动它的Activity<br>实现如下<br>Intent intent=new Intent(ActvityDemo.this,TestActivity.class)<br>startActivityForResults(intent,0x1000)<br>在ActvityDemo中需要获取到TestActivity的返回值，则TestActivity需要实现如下<br>Intent intent =new Intent();<br>intent.putExtra(“backkey”,”test”);<br>setResult(0x1001, intent);<br>那么backkey值在哪里获取呢？必须重写onActivityResult方法，通过判断requestCode<br>if(backCode==0x1001){<br>String str = data.getStringExtra(“backkey”);<br>    Log.i(TAG, “返回的值为：”+str);<br>    }</p>
<h2 id="四、保持Activity的运行状态"><a href="#四、保持Activity的运行状态" class="headerlink" title="四、保持Activity的运行状态"></a>四、保持Activity的运行状态</h2><h2 id="五、完成退出Activity"><a href="#五、完成退出Activity" class="headerlink" title="五、完成退出Activity"></a>五、完成退出Activity</h2><p>当进行back时，Activity回调用onDestory()方法，但进程没有被杀死，甚至调用finish()方法，进程还在。则需要完成退出，实现如下:<br>Intent intent=new Intent();<br>intent.setClass(context,MainActivity.class);<br>intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_UP);<br>intent.putExtra(“flag”,EXIT_APPLICATION);<br>context.startActivity(intent);</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;activity是手机应用程序窗口的交互界面，一个应用程序通常会包含多个activity,都会在Mainfest.xml中指定一个入口(主的acitivity)&lt;br&gt;
    
    </summary>
    
      <category term="移动开发" scheme="http://blog.greekw.com/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="http://blog.greekw.com/tags/Android/"/>
    
      <category term="activity" scheme="http://blog.greekw.com/tags/activity/"/>
    
  </entry>
  
  <entry>
    <title>Android之Activity分析</title>
    <link href="http://blog.greekw.com/2015/10/12/Android%E4%B9%8BActivity/"/>
    <id>http://blog.greekw.com/2015/10/12/Android之Activity/</id>
    <published>2015-10-12T08:24:00.000Z</published>
    <updated>2017-03-11T11:36:05.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>activity是手机应用程序窗口的交互界面，一个应用程序通常会包含多个activity,都会在Mainfest.xml中指定一个入口(主的acitivity)<br><a id="more"></a><br><strong>一、什么是Activity</strong><br>activity是手机应用程序窗口的交互界面，一个应用程序通常会包含多个activity,都会在Mainfest.xml中指定一个入口(主的acitivity).配置如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">   <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">   <span class="attr">android:name</span>=<span class="string">".MainActivity"</span> &gt;</div><div class="line">	  <span class="tag">&lt;<span class="name">intent-filter</span> &gt;</span></div><div class="line">		  <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">		  <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">	  <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>应用第一次运行时就会看到此Activity，并可以通过此Activity去启动其他的Activity.每当新的Activity启动时，当前的Activity就会停止，新的Activity就会压入到<br>stack(先进后出)中，并获得用户焦点，当回退时，当前的Activity就回销毁，上一个Activity就会恢复</p>
<p><strong>二、activivty的什么周期</strong><br>流程图如下:<br>    <img src="http://img.blog.csdn.net/20151012162332940" alt="这里写图片描述"><br>涉及都的方法有onCreate()  onStart() onResume() onPause() onStop() onRestart() onDestory<br>Activity启动过程 onCreate()——&gt;onStart()——&gt;onResume()  退出Activity过程 onPause()——&gt;onStop()——&gt;onDestory()<br>按下home键回到主界面时执行过程:onPause()——&gt;onStop(),再次打开运行过程:onRestart()——&gt;onStart()——&gt;onResume()<br>以下是各个方法的说明:<br>onCreate()：当 activity 第一次创建时会被调用。在这个方法中你需要完成所有的正常静态设置 ，比如创建一个视图（ view ）、绑定列表的数据等等。<br>如果能捕获到 activity 状态的话，这个方法传递进来的 Bundle 对象将存放了 activity 当前的状态。调用该方法后一般会调用 onStart() 方法。</p>
<p>onRestart()：在 activity 被停止后重新启动时会调用该方法。其后续会调用 onStart 方法。</p>
<p>onStart()当 activity 对于用户可见前即调用这个方法。如果 activity回到前台则接着调用 onResume() ，如果 activity 隐藏则调用onStop()</p>
<p>onResume()：在 activity 开始与用户交互前调用该方法。在这时该activity 处于 activity 栈的顶部，并且接受用户的输入。其后续会调用 onPause() 方法。</p>
<p>onPause()：在系统准备开始恢复其它 activity 时会调用该方法。这个方法中通常用来提交一些还没保存的更改到持久数据 中，停止一些动画或其它一些耗 CPU 的操作等等。<br>无论在该方法里面进行任何操作，都需要较快速完成，因为如果它不返回的话，下一个 activity 将无法恢复出来。如果 activity 返回到前台将会调用 onResume() ，如果 activity 变得对用户不可见了将会调用onStop() 。</p>
<p>onStop()：在 activity 对用户不可见时将调用该方法。可能会因为当前 activity 正在被销毁，或另一个 activity （已经存在的activity 或新的 activity ）已经恢复了正准备覆盖它，而调用该方法。<br>如果 activity 正准备返回与用户交互时后续会调用onRestart ，如果 activity 正在被释放则会调用 onDestroy 。</p>
<p>onDestroy()：在 activity 被销毁前会调用该方法。这是 activity 能接收到的最后一个调用。可能会因为有人调用了 finish 方法使得当前activity 正在关闭，<br>系统为了保护内存临时释放这个 activity的实例，而调用该方法。你可以用 isFinishing 方法来区分这两种不同的情况。</p>
<p><strong>三、如何启动一个新的Activity</strong><br>1.启动一个新的Activity，可以通过Context的startActivity()方法<br> 如Intent intent=new Intent(this,TestActivity.class)(其中TestActivity是需要被启动的Activity)<br>   startActivity(intent)<br>2.若启动一个新的Activity，并需要传递数据到此Activity<br>    Intent intent=new Intent(this,TestActivity.class)(其中TestActivity是需要被启动的Activity)<br>    Bundle bundle=new Bundle();<br>    bundle.putString(“name”,”张三”)<br>    intent.putExtra(bundle)<br>    startActivity(intent)<br>3.若启动新的带返回值的Activity,并将返回值传给启动它的Activity<br>实现如下<br>Intent intent=new Intent(ActvityDemo.this,TestActivity.class)<br>startActivityForResults(intent,0x1000)<br>在ActvityDemo中需要获取到TestActivity的返回值，则TestActivity需要实现如下<br>Intent intent =new Intent();<br>intent.putExtra(“backkey”,”test”);<br>setResult(0x1001, intent);<br>那么backkey值在哪里获取呢？必须重写onActivityResult方法，通过判断requestCode<br>if(backCode==0x1001){<br>String str = data.getStringExtra(“backkey”);<br>    Log.i(TAG, “返回的值为：”+str);<br>    }</p>
<p><strong>四、保持Activity的运行状态</strong></p>
<p><strong>五、完成退出Activity</strong><br>当进行back时，Activity回调用onDestory()方法，但进程没有被杀死，甚至调用finish()方法，进程还在。则需要完成退出，实现如下:<br>Intent intent=new Intent();<br>intent.setClass(context,MainActivity.class);<br>intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_UP);<br>intent.putExtra(“flag”,EXIT_APPLICATION);<br>context.startActivity(intent);</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;activity是手机应用程序窗口的交互界面，一个应用程序通常会包含多个activity,都会在Mainfest.xml中指定一个入口(主的acitivity)&lt;br&gt;
    
    </summary>
    
      <category term="android开发" scheme="http://blog.greekw.com/categories/android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="android" scheme="http://blog.greekw.com/tags/android/"/>
    
      <category term="Activity" scheme="http://blog.greekw.com/tags/Activity/"/>
    
  </entry>
  
</feed>
